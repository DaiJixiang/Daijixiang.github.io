<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JSP 连接数据库</title>
      <link href="/2019/02/19/JSP-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/02/19/JSP-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP连接数据库"><a href="#JSP连接数据库" class="headerlink" title="JSP连接数据库"></a>JSP连接数据库</h1><p>本教程假定您已经了解了 JDBC 应用程序的工作方式。在您开始学习 JSP 数据库访问之前，请访问 Java MySQL 连接 来设置相关驱动及配置。</p><p> <strong> 注意 jar包：mysql-connector-java-5.1.39-bin.jar </strong><br> <strong> 下载后把 mysql-connector-java-5.1.39-bin.jar 拷贝到 tomcat 下 lib 目录。 </strong></p><p>从基本概念下手，让我们来创建一个简单的表，并在表中创建几条记录。</p><h2 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h2><p>接下来我们在 MySQL 中创建 RUNOOB 数据库，并创建 websites 数据表，表结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `websites` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` char(20) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;站点名称&apos;,</span><br><span class="line">  `url` varchar(255) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  `alexa` int(11) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;Alexa 排名&apos;,</span><br><span class="line">  `country` char(10) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;国家&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>插入一些数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `websites` VALUES (&apos;1&apos;, &apos;Google&apos;, &apos;https://www.google.cm/&apos;, &apos;1&apos;, &apos;USA&apos;), (&apos;2&apos;, &apos;淘宝&apos;, &apos;https://www.taobao.com/&apos;, &apos;13&apos;, &apos;CN&apos;), (&apos;3&apos;, &apos;菜鸟教程&apos;, &apos;http://www.runoob.com&apos;, &apos;5892&apos;, &apos;&apos;), (&apos;4&apos;, &apos;微博&apos;, &apos;http://weibo.com/&apos;, &apos;20&apos;, &apos;CN&apos;), (&apos;5&apos;, &apos;Facebook&apos;, &apos;https://www.facebook.com/&apos;, &apos;3&apos;, &apos;USA&apos;);</span><br></pre></td></tr></table></figure></p><h2 id="SELECT操作"><a href="#SELECT操作" class="headerlink" title="SELECT操作"></a>SELECT操作</h2><p>接下来的这个例子告诉我们如何使用JSTL SQL标签来运行SQL SELECT语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.*,java.util.*,java.sql.*&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;javax.servlet.http.*,javax.servlet.*&quot; %&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; prefix=&quot;sql&quot;%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;SELECT 操作&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">JDBC 驱动名及数据库 URL </span><br><span class="line">数据库的用户名与密码，需要根据自己的设置</span><br><span class="line">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;sql:setDataSource var=&quot;snapshot&quot; driver=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">     url=&quot;jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8&quot;</span><br><span class="line">     user=&quot;root&quot;  password=&quot;123456&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">&lt;sql:query dataSource=&quot;$&#123;snapshot&#125;&quot; var=&quot;result&quot;&gt;</span><br><span class="line">SELECT * from websites;</span><br><span class="line">&lt;/sql:query&gt;</span><br><span class="line">&lt;h1&gt;JSP 数据库实例 - 菜鸟教程&lt;/h1&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;100%&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">   &lt;th&gt;站点名&lt;/th&gt;</span><br><span class="line">   &lt;th&gt;站点地址&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;c:forEach var=&quot;row&quot; items=&quot;$&#123;result.rows&#125;&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.id&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.name&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.url&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="INSERT操作"><a href="#INSERT操作" class="headerlink" title="INSERT操作"></a>INSERT操作</h2><p>这个例子告诉我们如何使用JSTL SQL标签来运行SQL INSERT语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.*,java.util.*,java.sql.*&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;javax.servlet.http.*,javax.servlet.*&quot; %&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; prefix=&quot;sql&quot;%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;SELECT 操作&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">JDBC 驱动名及数据库 URL </span><br><span class="line">数据库的用户名与密码，需要根据自己的设置</span><br><span class="line">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;sql:setDataSource var=&quot;snapshot&quot; driver=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">     url=&quot;jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8&quot;</span><br><span class="line">     user=&quot;root&quot;  password=&quot;123456&quot;/&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">插入数据</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;sql:update dataSource=&quot;$&#123;snapshot&#125;&quot; var=&quot;result&quot;&gt;</span><br><span class="line">INSERT INTO websites (name,url,alexa,country) VALUES (&apos;菜鸟教程移动站&apos;, &apos;http://m.runoob.com&apos;, 5093, &apos;CN&apos;);</span><br><span class="line">&lt;/sql:update&gt;</span><br><span class="line">&lt;sql:query dataSource=&quot;$&#123;snapshot&#125;&quot; var=&quot;result&quot;&gt;</span><br><span class="line">SELECT * from websites;</span><br><span class="line">&lt;/sql:query&gt;</span><br><span class="line">&lt;h1&gt;JSP 数据库实例 - 菜鸟教程&lt;/h1&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;100%&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">   &lt;th&gt;站点名&lt;/th&gt;</span><br><span class="line">   &lt;th&gt;站点地址&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;c:forEach var=&quot;row&quot; items=&quot;$&#123;result.rows&#125;&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.id&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.name&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.url&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="DELETE操作"><a href="#DELETE操作" class="headerlink" title="DELETE操作"></a>DELETE操作</h2><p>这个例子告诉我们如何使用JSTL SQL标签来运行SQL DELETE语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.*,java.util.*,java.sql.*&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;javax.servlet.http.*,javax.servlet.*&quot; %&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; prefix=&quot;sql&quot;%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;SELECT 操作&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">JDBC 驱动名及数据库 URL </span><br><span class="line">数据库的用户名与密码，需要根据自己的设置</span><br><span class="line">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;sql:setDataSource var=&quot;snapshot&quot; driver=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">     url=&quot;jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8&quot;</span><br><span class="line">     user=&quot;root&quot;  password=&quot;123456&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">删除 ID 为 11 的数据</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;sql:update dataSource=&quot;$&#123;snapshot&#125;&quot; var=&quot;count&quot;&gt;</span><br><span class="line">  DELETE FROM websites WHERE Id = ?</span><br><span class="line">  &lt;sql:param value=&quot;$&#123;11&#125;&quot; /&gt;</span><br><span class="line">&lt;/sql:update&gt;</span><br><span class="line"></span><br><span class="line">&lt;sql:query dataSource=&quot;$&#123;snapshot&#125;&quot; var=&quot;result&quot;&gt;</span><br><span class="line">SELECT * from websites;</span><br><span class="line">&lt;/sql:query&gt;</span><br><span class="line">&lt;h1&gt;JSP 数据库实例 - 菜鸟教程&lt;/h1&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;100%&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">   &lt;th&gt;站点名&lt;/th&gt;</span><br><span class="line">   &lt;th&gt;站点地址&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;c:forEach var=&quot;row&quot; items=&quot;$&#123;result.rows&#125;&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.id&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.name&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.url&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="UPDATE操作"><a href="#UPDATE操作" class="headerlink" title="UPDATE操作"></a>UPDATE操作</h2><p>这个例子告诉我们如何使用JSTL SQL标签来运行SQL UPDATE语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.*,java.util.*,java.sql.*&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;javax.servlet.http.*,javax.servlet.*&quot; %&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; prefix=&quot;sql&quot;%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;SELECT 操作&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">JDBC 驱动名及数据库 URL </span><br><span class="line">数据库的用户名与密码，需要根据自己的设置</span><br><span class="line">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;sql:setDataSource var=&quot;snapshot&quot; driver=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">     url=&quot;jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8&quot;</span><br><span class="line">     user=&quot;root&quot;  password=&quot;123456&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">修改 ID 为 3 的名字：菜鸟教程改为 RUNOOB</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;c:set var=&quot;SiteId&quot; value=&quot;3&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">&lt;sql:update dataSource=&quot;$&#123;snapshot&#125;&quot; var=&quot;count&quot;&gt;</span><br><span class="line">  UPDATE websites SET name = &apos;RUNOOB&apos; WHERE Id = ?</span><br><span class="line">  &lt;sql:param value=&quot;$&#123;SiteId&#125;&quot; /&gt;</span><br><span class="line">&lt;/sql:update&gt;</span><br><span class="line"></span><br><span class="line">&lt;sql:query dataSource=&quot;$&#123;snapshot&#125;&quot; var=&quot;result&quot;&gt;</span><br><span class="line">SELECT * from websites;</span><br><span class="line">&lt;/sql:query&gt;</span><br><span class="line">&lt;h1&gt;JSP 数据库实例 - 菜鸟教程&lt;/h1&gt;</span><br><span class="line">&lt;table border=&quot;1&quot; width=&quot;100%&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">   &lt;th&gt;站点名&lt;/th&gt;</span><br><span class="line">   &lt;th&gt;站点地址&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;c:forEach var=&quot;row&quot; items=&quot;$&#123;result.rows&#125;&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.id&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.name&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;c:out value=&quot;$&#123;row.url&#125;&quot;/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信开发--网页授权access_token与全局access_token获取用户信息的接口</title>
      <link href="/2019/02/19/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83access-token%E4%B8%8E%E5%85%A8%E5%B1%80access-token%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/02/19/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83access-token%E4%B8%8E%E5%85%A8%E5%B1%80access-token%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="微信开发——网页授权access-token与全局access-token获取用户信息的接口"><a href="#微信开发——网页授权access-token与全局access-token获取用户信息的接口" class="headerlink" title="微信开发——网页授权access_token与全局access_token获取用户信息的接口"></a>微信开发——网页授权access_token与全局access_token获取用户信息的接口</h1><h2 id="网页授权access-token"><a href="#网页授权access-token" class="headerlink" title="网页授权access_token"></a>网页授权access_token</h2><p>微信网页授权是通过OAuth2.0机制实现的。在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证——网页授权access_token。通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息。网页授权access_token是通过code换取的凭证，用于获取用户的基本信息，次数不限，时间最长5分钟。</p><p>获取网页授权access_token接口地址为：<br><a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a></p><p>获取code接口地址为:<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></p><p>获取用户信息接口:<br><a href="https://api.weixin.qq.com/sns/userinfo?access_token={0}&amp;openid={1}&amp;lang=zh_CN" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/userinfo?access_token={0}&amp;openid={1}&amp;lang=zh_CN</a></p><h2 id="全局access-token"><a href="#全局access-token" class="headerlink" title="全局access_token"></a>全局access_token</h2><p>其他微信接口需要通过基础支持中的“获取access_token”接口来获取到的全局access_token调用。全局access_token是HTML5网页调用基础接口的全局唯一凭证，有效时间为2小时，每天最多调用2000次。</p><p>获取全局access_token接口地址为：<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</a></p><p>获取用户OpenID接口地址：<br><a href="https://api.weixin.qq.com/cgi-bin/user/info/batchget?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/user/info/batchget?access_token=ACCESS_TOKEN</a></p><p>如果想用这个全局access_token获取用户信息，那么要求用户已经关注了你的公众号。此时才能根据用户的OpenID来获取用户的基本信息。</p>]]></content>
      
      
      <categories>
          
          <category> java-access_token </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2019/02/19/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/02/19/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>相比WYSIWYG编辑器<br>优点：<br>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可<br>缺点：<br>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。<br>还好，简书是支持Markdown编辑模式的。<br>开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器</p><p>一、标题<br>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。<br>示例：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><p>二、字体</p><p>加粗</p><p>要加粗的文字左右分别用两个*号包起来</p><p>斜体</p><p>要倾斜的文字左右分别用一个*号包起来</p><p>斜体加粗</p><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><p>删除线</p><p>要加删除线的文字左右分别用两个<del>号包起来<br>示例：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br>~~这是加删除线的文字</del></p><p>三、引用<br>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用<br>示例：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>四、分割线<br>三个或者三个以上的 - 或者 * 都可以。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><hr><hr><hr><p>五、图片<br>语法：<br><img src="图片地址" alt="图片alt" title="&#39;图片title&#39;"></p><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p><p>示例：<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><p>blockchain</p><p>上传本地图片直接点击导航栏的图片标志，选择图片即可<br>六、超链接<br>语法：<br><a href="超链接地址" title="超链接title">超链接名</a><br>title可加可不加</p><p>示例：<br><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p>效果如下：<br>简书<br>百度<br>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。<br><a href="超链接地址" target="_blank">超链接名</a></p><p>示例<br><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><p>七、列表</p><p>无序列表</p><p>语法：<br>无序列表用 - + * 任何一种都可以</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>注意：- + * 跟内容之间都要有一个空格</p><p>语法：<br>数字加点<br>1.列表内容<br>2.列表内容<br>3.列表内容</p><p>注意：序号跟内容之间要有空格</p><p>列表嵌套</p><p>上一级和下一级之间敲三个空格即可</p><p>八、表格<br>语法：<br>表头|表头|表头<br>—|:–:|—:<br>内容|内容|内容<br>内容|内容|内容</p><p>第二行分割表头和内容。</p><ul><li>有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略</li></ul><p>示例：<br>姓名|技能|排行<br>–|:–:|–:<br>刘备|哭|大哥<br>关羽|打|二哥<br>张飞|骂|三弟</p><p>九、代码<br>语法：<br>单行代码：代码之间分别用一个反引号包起来<br>    <code>代码内容</code></p><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br>(<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">单行代码</span><br><span class="line">`create database hero;`</span><br><span class="line"></span><br><span class="line">代码块</span><br><span class="line">(```)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br><span class="line"></span><br><span class="line">十、流程图</span><br><span class="line">```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>access_token</title>
      <link href="/2019/02/19/access-token/"/>
      <url>/2019/02/19/access-token/</url>
      
        <content type="html"><![CDATA[<p><em>微信公众号之access_token获取与管理</em></p><p>转自：<a href="https://www.cnblogs.com/fengzheng/p/5027630.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengzheng/p/5027630.html</a></p><p>在将access_token之前，还有两个重要参数需要知晓，这两个参数分别是appID和appsecret，这是在申请公众号的时候自动分配给公众号的，相当于公众号的身份标示，在很多接口中需要这两个参数，接下来在请求access_token的时候就需要这两个参数。</p><p>公众号接入成功之后，接下来就要实现相应的逻辑了。在使用微信公众号接口中，发现有许多请求都需要access_token。access_token是公众号的全局唯一凭证，公众号调用各接口时都需使用access_token。开发者需要进行妥善保存。access_token的存储至少要保留512个字符空间。access_token的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的access_token失效。并且每天调用获取access_token接口的上限是2000次。</p><p>总结以上说明，access_token需要做到以下两点：</p><p>1.因为access_token有2个小时的时效性，要有一个机制保证最长2个小时重新获取一次；</p><p>2.因为接口调用上限每天2000次，所以不能调用太频繁；</p><p>就此，这里采用的方案是这样的，定义一个默认启动的servlet，在init方法中启动一个Thread,这个进程中定义一个无限循环的方法，用来获取access_token，当获取成功后，此进程休眠7000秒，否则休眠3秒钟继续获取。流程图如下：</p><p>下面正式开始在工程中实现以上思路，因为返回的数据都是json格式，这里会用到阿里的fastjson库，为构造请求和处理请求后的数据序列化和反序列化提供支持。后续的其它接口也会用到。</p><p>1.定义一个AccessToken实体</p><p>public class AccessToken {<br>    public String getAccessToken() {<br>        return accessToken;<br>    }</p><pre><code>public void setAccessToken(String accessToken) {    this.accessToken = accessToken;}public int getExpiresin() {    return expiresin;}public void setExpiresin(int expiresin) {    this.expiresin = expiresin;}private String accessToken;private int expiresin;</code></pre><p>}<br>2.定义一个默认启动的servlet，在init方法中启动一个Thread，并在web.xml中将这个servlet设置为默认自启动的。</p><p>import javax.servlet.ServletException;<br>import javax.servlet.annotation.WebServlet;<br>import javax.servlet.http.HttpServlet;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import java.io.IOException;</p><p>/**</p><ul><li>Created by huzhicheng on 2015/12/8.<br>*/<br>@WebServlet(name = “AccessTokenServlet”)<br>public class AccessTokenServlet extends HttpServlet {<br> public void init() throws ServletException {<pre><code>TokenThread.appId = getInitParameter(&quot;appid&quot;);  //获取servlet初始参数appid和appsecretTokenThread.appSecret = getInitParameter(&quot;appsecret&quot;);System.out.println(&quot;appid:&quot;+TokenThread.appId);System.out.println(&quot;appSecret:&quot;+TokenThread.appSecret);new Thread(new TokenThread()).start(); //启动进程</code></pre> }<br> protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<br> }<br> protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<br> }<br>}<br>在web.xml中设置servlet自启动，并设置初始化参数appid和appsecret</li></ul><p><servlet><br>        <servlet-name>initAccessTokenServlet</servlet-name><br>        <servlet-class><br>            org.fengzheng.wechat.accesstoken.AccessTokenServlet<br>        </servlet-class><br>        <init-param><br>            <param-name>appid</param-name><br>            <param-value>your appid</param-value><br>        </init-param><br>        <init-param><br>            <param-name>appsecret</param-name><br>            <param-value>your appsecret</param-value><br>        </init-param><br>        <load-on-startup>0</load-on-startup><br> </servlet><br>3.定义Thread类，在此类中调用access_token获取接口，并将得到的数据抽象到静态实体，以便在其它地方使用。接口地址为<a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET，其中grant_type固定写为client_credential即可。此请求为https的get请求，返回的数据格式为{&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200}。" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET，其中grant_type固定写为client_credential即可。此请求为https的get请求，返回的数据格式为{&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200}。</a></p><p>进程类实现如下：</p><p>import com.alibaba.fastjson.JSON;<br>import com.alibaba.fastjson.JSONObject;<br>import org.fengzheng.wechat.common.NetWorkHelper;</p><p>/**</p><ul><li><p>Created by huzhicheng on 2015/11/5.<br>*/<br>public class TokenThread implements Runnable {<br> public static String appId = “”;</p><p> public static String appSecret= “”;<br><br>　　//注意是静态的<br> public static AccessToken accessToken = null;</p><p> public void run(){</p><pre><code>while (true){    try{        accessToken = this.getAccessToken();        if(null!=accessToken){            System.out.println(accessToken.getAccessToken());            Thread.sleep(7000 * 1000); //获取到access_token 休眠7000秒        }else{            Thread.sleep(1000*3); //获取的access_token为空 休眠3秒        }    }catch(Exception e){        System.out.println(&quot;发生异常：&quot;+e.getMessage());        e.printStackTrace();        try{            Thread.sleep(1000*10); //发生异常休眠1秒        }catch (Exception e1){        }    }}</code></pre><p> }</p></li></ul><pre><code>/** * 获取access_token * @return */private AccessToken getAccessToken(){    NetWorkHelper netHelper = new NetWorkHelper();    String Url = String.format(&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=%s&amp;secret=%s&quot;,this.appId,this.appSecret);    String result = netHelper.getHttpsResponse(Url,&quot;&quot;);    System.out.println(result);    //response.getWriter().println(result);    JSONObject json = JSON.parseObject(result);    AccessToken token = new AccessToken();    token.setAccessToken(json.getString(&quot;access_token&quot;));    token.setExpiresin(json.getInteger(&quot;expires_in&quot;));    return token;}</code></pre><p>}<br>其中NetWorkHelper中getHttpsResponse方法是请求一个https地址，参数requestMethod为字符串“GET”或者“POST”，传null或者“”默认为get方式。</p><p>实现如下：</p><p>public String getHttpsResponse(String hsUrl,String requestMethod) {<br>        URL url;<br>        InputStream is = null;<br>        String resultData = “”;<br>        try {<br>            url = new URL(hsUrl);<br>            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();<br>            TrustManager[] tm = {xtm};</p><pre><code>        SSLContext ctx = SSLContext.getInstance(&quot;TLS&quot;);        ctx.init(null, tm, null);        con.setSSLSocketFactory(ctx.getSocketFactory());        con.setHostnameVerifier(new HostnameVerifier() {            @Override            public boolean verify(String arg0, SSLSession arg1) {                return true;            }        });        con.setDoInput(true); //允许输入流，即允许下载        //在android中必须将此项设置为false        con.setDoOutput(false); //允许输出流，即允许上传        con.setUseCaches(false); //不使用缓冲        if(null!=requestMethod &amp;&amp; !requestMethod.equals(&quot;&quot;)) {            con.setRequestMethod(requestMethod); //使用指定的方式        }        else{            con.setRequestMethod(&quot;GET&quot;); //使用get请求        }        is = con.getInputStream();   //获取输入流，此时才真正建立链接        InputStreamReader isr = new InputStreamReader(is);        BufferedReader bufferReader = new BufferedReader(isr);        String inputLine = &quot;&quot;;        while ((inputLine = bufferReader.readLine()) != null) {            resultData += inputLine + &quot;\n&quot;;        }        System.out.println(resultData);        Certificate[] certs = con.getServerCertificates();        int certNum = 1;        for (Certificate cert : certs) {            X509Certificate xcert = (X509Certificate) cert;        }    } catch (Exception e) {        e.printStackTrace();    }    return resultData;}</code></pre><p>X509TrustManager xtm = new X509TrustManager() {<br>        @Override<br>        public X509Certificate[] getAcceptedIssuers() {<br>            // TODO Auto-generated method stub<br>            return null;<br>        }</p><pre><code>    @Override    public void checkServerTrusted(X509Certificate[] arg0, String arg1)            throws CertificateException {        // TODO Auto-generated method stub    }    @Override    public void checkClientTrusted(X509Certificate[] arg0, String arg1)            throws CertificateException {        // TODO Auto-generated method stub    }};</code></pre><p>至此代码实现完毕，将项目部署，看到控制台输出如下：</p><p>　　</p><p>为方面看效果，可以把休眠时间设置短一点，比如30秒获取一次，然后将access_token输出。下面做一个测试jsp页面，并把休眠时间设置为30秒，这样过30秒刷新页面，就可以看到变化，顺便演示一下在其它地方如何拿到access_token</p><p>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;<br>&lt;%@ page import=”org.fengzheng.wechat.accesstoken.TokenThread” %&gt;</p><html><br>  <head><meta name="generator" content="Hexo 3.8.0"><br>    <title></title><br>  </head><br>  <body><br>  access_token为：&lt;%=TokenThread.accessToken.getAccessToken()%&gt;<br>  </body><br></html>]]></content>
      
      
      <categories>
          
          <category> java-access_token </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrpy使用方法</title>
      <link href="/2019/02/01/scrapy%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/01/scrapy%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Scrapy教程</p><p>将要抓取 quotes.toscrape.com网站。</p><p>此教程指导你完成以下任务：</p><p>新建Scrapy工程<br>编写一个spider爬网站提取数据<br>用命令行导出爬取的数据<br>改变spider递归爬行链接<br>使用spider参数<br>创建一个项目<br>在抓取之前，先要构建Scrapy项目：<br>scrapy startproject tutorial<br>此命令创建以下内容的tutorial目录：</p><p>tutorial/<br>    scrapy.cfg            # deploy configuration file</p><pre><code>tutorial/             # project&apos;s Python module, you&apos;ll import your code from here    __init__.py    items.py          # project items definition file    pipelines.py      # project pipelines file    settings.py       # project settings file    spiders/          # a directory where you&apos;ll later put your spiders        __init__.py</code></pre><p>第一个爬虫<br>Spider是定义为爬取网站信息的类。必须继承自scrapy.Spider，定义初始请求，如何选择页面爬取url，以及如何解析页面内容提取数据。</p><p>这是我们第一个Spider的代码，把它保存在tutorial/spiders目录的 quotes_spider.py 中文件。</p><p>import scrapy</p><p>class QuotesSpider(scrapy.Spider):<br>    name = “quotes”</p><pre><code>def start_requests(self):    urls = [        &apos;http://quotes.toscrape.com/page/1/&apos;,        &apos;http://quotes.toscrape.com/page/2/&apos;,    ]    for url in urls:        yield scrapy.Request(url=url, callback=self.parse)def parse(self, response):    page = response.url.split(&quot;/&quot;)[-2]    filename = &apos;quotes-%s.html&apos; % page    with open(filename, &apos;wb&apos;) as f:        f.write(response.body)    self.log(&apos;Saved file %s&apos; % filename)</code></pre><p>如上，spider继承自 scrapy.Spider<br>并且定义了一些属性和方法。</p><p>name:标识spider。在项目中必须是唯一的，不能给不同的spider设置相同的名称。<br>start_requests():必须返回一个请求的迭代（可以返回一个请求的列表或者写一个生成器函数），spider从这里开始爬去。子序列请求从这些初始的请求自动生成。<br>parse():在每个请求完成时回掉方法。response参数是TextResponse类的实例，包含页面内容和一些选择器等函数操作。<br>parse()函数通常解析html，把抓到的数据提取为dicts，随后查找新的URLS创建新的请求。</p><p>如何运行我们的蜘蛛<br>在项目的最顶层目录运行：</p><p>scrapy crawl quotes</p><p>这条命令执行我们刚添加的名为quotes的蜘蛛。它发送一些请求到quotes.toscrape.com。你将得到如下输出：</p><p>… (omitted for brevity)<br>2016-12-16 21:24:05 [scrapy.core.engine] INFO: Spider opened<br>2016-12-16 21:24:05 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)<br>2016-12-16 21:24:05 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:6023<br>2016-12-16 21:24:05 [scrapy.core.engine] DEBUG: Crawled (404) &lt;GET <a href="http://quotes.toscrape.com/robots.txt&gt;" target="_blank" rel="noopener">http://quotes.toscrape.com/robots.txt&gt;</a> (referer: None)<br>2016-12-16 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET <a href="http://quotes.toscrape.com/page/1/&gt;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/1/&gt;</a> (referer: None)<br>2016-12-16 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET <a href="http://quotes.toscrape.com/page/2/&gt;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/2/&gt;</a> (referer: None)<br>2016-12-16 21:24:05 [quotes] DEBUG: Saved file quotes-1.html<br>2016-12-16 21:24:05 [quotes] DEBUG: Saved file quotes-2.html<br>2016-12-16 21:24:05 [scrapy.core.engine] INFO: Closing spider (finished)<br>…<br>现在，检查当前目录。你会注意到创建了两个新文件quotes-1.html 和quotes-2.html，里面包含了urls的响应数据。</p><p>内部机制是什么<br>Scrapy调用蜘蛛的start_requests方法，一旦接收到一个响应，立马初始化Response对象然后调用请求的回掉函数（在此例中，时parse()函数）把response对象作为参数。</p><p>start_requests函数简写<br>作为start_requests函数的替代，可以定义start_urls的种子列表。默认的start_requests()函数实现中会使用start_urls创建初始请求。</p><p>import scrapy</p><p>class QuotesSpider(scrapy.Spider):<br>    name = “quotes”<br>    start_urls = [<br>        ‘<a href="http://quotes.toscrape.com/page/1/&#39;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/1/&#39;</a>,<br>        ‘<a href="http://quotes.toscrape.com/page/2/&#39;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/2/&#39;</a>,<br>    ]</p><pre><code>def parse(self, response):    page = response.url.split(&quot;/&quot;)[-2]    filename = &apos;quotes-%s.html&apos; % page    with open(filename, &apos;wb&apos;) as f:        f.write(response.body)</code></pre><p>urls的每次请求都会调用parse()。这是因为parse()是Scrapy在没有显式给回掉函数赋值时的默认回掉函数。</p><p>提取数据<br>最好的学习使用Scrapy的选择器的方式是使用Scrapy shell。</p><p>scrapy shell ‘<a href="http://quotes.toscrape.com/page/1/&#39;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/1/&#39;</a></p><p>提示<br>记住使用单引号包裹地址否则包含参数（如&amp;字符）将不会工作</p><p>在windows中，使用双引号</p><p>你将看到：</p><p>[ … Scrapy log here … ]<br>2016-09-19 12:09:27 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET <a href="http://quotes.toscrape.com/page/1/&gt;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/1/&gt;</a> (referer: None)<br>[s] Available Scrapy objects:<br>[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)<br>[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x7fa91d888c90&gt;<br>[s]   item       {}<br>[s]   request    &lt;GET <a href="http://quotes.toscrape.com/page/1/&gt;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/1/&gt;</a><br>[s]   response   &lt;200 <a href="http://quotes.toscrape.com/page/1/&gt;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/1/&gt;</a><br>[s]   settings   &lt;scrapy.settings.Settings object at 0x7fa91d888c10&gt;<br>[s]   spider     <defaultspider 'default'="" at="" 0x7fa91c8af990=""><br>[s] Useful shortcuts:<br>[s]   shelp()           Shell help (print this help)<br>[s]   fetch(req_or_url) Fetch request (or URL) and update local objects<br>[s]   view(response)    View response in a browser</defaultspider></p><blockquote><blockquote><blockquote><p>在shell中，可以使用response对象的CSS 函数选择元素。</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>response.css(‘title’)<br>[<selector xpath="descendant-or-self::title" data="<title>Quotes to Scrape</title>">]<br>response.css(‘title’)的运行结果是一个名为SelectorList的list-like对象，它是包含XML/HTML元素的 Selector<br>对象列表允许你进一步查询选择和提取数据。</selector></p></blockquote></blockquote></blockquote><p>为了导出title的文本，你可以：</p><blockquote><blockquote><blockquote><p>response.css(‘title::text’).extract()<br>[‘Quotes to Scrape’]<br>此处有两点要注意：一、我们添加了::text到CSS查询中，意味着只选择了<title>元素的text属性。如果不指定::text，我们会得到的是整个title元素。</title></p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>response.css(‘title’).extract()<br>[‘<title>Quotes to Scrape</title>‘]<br>二、.extract()返回SelectorList的文本列表。只取第一个元素的文本：</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>response.css(‘title::text’).extract_first()<br>‘Quotes to Scrape’<br>也可以使用python的列表写法：</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>response.css(‘title::text’)[0].extract()<br>‘Quotes to Scrape’<br>但是，使用extract()和extract_first()方法可以在没有找到任何匹配元素时返回None，避免IndexError。</p></blockquote></blockquote></blockquote><p>除了extract()和extract_first()方法，你还可以使用re()的正则表达式方法。</p><blockquote><blockquote><blockquote><p>response.css(‘title::text’).re(r’Quotes.*’)<br>[‘Quotes to Scrape’]<br>response.css(‘title::text’).re(r’Q\w+’)<br>[‘Quotes’]<br>response.css(‘title::text’).re(r’(\w+) to (\w+)’)<br>[‘Quotes’, ‘Scrape’]<br>为了找到适当的CSS选择器，你可从shell中使用view(response)浏览响应界面。你可以使用浏览器开发工具或插件如Firebug（此处请看使用Firebug 抓取和使用FireFox抓取）。</p></blockquote></blockquote></blockquote><p>选择器小工具也是一个查找CSS选择器很好的工具，可以可视化的查找元素，可在很多浏览器中工作。</p><p>XPATH:简介<br>除了css，Scrapy选择器也支持XPath表达式：</p><blockquote><blockquote><blockquote><p>response.xpath(‘//title’)<br>[<selector xpath="//title" data="<title>Quotes to Scrape</title>">]<br>response.xpath(‘//title/text()’).extract_first()<br>‘Quotes to Scrape’<br>XPATH表达式很强大，是Scrapy选择器的基础。事实上，CSS选择器在内部转换为Xpath。你可以在shell查看文本选择器的对象类型。</selector></p></blockquote></blockquote></blockquote><p>尽管不如CSS选择器流行，Xpath表达式却更强大。它除了可以导航到结构也可以查找内容。使用xpath，你能这么选择如：选择包含Next Page的文本连接。这使得xpath非常适合抓取，我们鼓励你学习Xpath，即使你已经知道如何构造CSS选择器，它会更简单。</p><p>我们在这不会涉及XPath太多，你可以阅读使用XPath.为了学习Xpath，我们建议通过例子学习XPath教程，和如何使用XPath思考。</p><p>提取quotes和authors<br>现在你知道了一点关于选择和提取的知识了，让我们完善我们的spider，写代码从网站页面提取quotes。</p><p><a href="http://quotes.toscrape.com中的每个quote的HTML形式类似下面：" target="_blank" rel="noopener">http://quotes.toscrape.com中的每个quote的HTML形式类似下面：</a></p><p><div class="quote"><br>    <span class="text">“The world as we have created it is a process of our<br>    thinking. It cannot be changed without changing our thinking.”</span><br>    <span><br>        by <small class="author">Albert Einstein</small><br>        <a href="/author/Albert-Einstein">(about)</a><br>    </span><br>    <div class="tags"><br>        Tags:<br>        <a class="tag" href="/tag/change/page/1/">change</a><br>        <a class="tag" href="/tag/deep-thoughts/page/1/">deep-thoughts</a><br>        <a class="tag" href="/tag/thinking/page/1/">thinking</a><br>        <a class="tag" href="/tag/world/page/1/">world</a><br>    </div><br></div><br>打开scrapy shell尝试提取我们想要的数据。</p><p>$ scrapy shell ‘<a href="http://quotes.toscrape.com&#39;" target="_blank" rel="noopener">http://quotes.toscrape.com&#39;</a><br>我们使用下面语法得到一系列的quote元素的选择器：</p><blockquote><blockquote><blockquote><p>response.css(“div.quote”)<br>每个选择器都可以查询它们的子元素。我们把第一个选择器赋值给变量，这样我们可以直接运行指定的quote选择器。</p></blockquote></blockquote></blockquote><p>quote = response.css(“div.quote”)[0]<br>现在我们从quote导出title,author和tags使用我们刚创建的quote对象。当你知道你只需要第一个结果时，你可以：</p><blockquote><blockquote><blockquote><p>title = quote.css(“span.text::text”).extract_first()<br>title<br>‘“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”’<br>author = quote.css(“small.author::text”).extract_first()<br>author<br>‘Albert Einstein’<br>考虑到标签是字符串列表，我们可以使用.extract()方法获取他们。</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>tags = quote.css(“div.tags a.tag::text”).extract()<br>tags<br>[‘change’, ‘deep-thoughts’, ‘thinking’, ‘world’]<br>解决了如何导出每个，我们现在可迭代所有quotes元素把他们保存到Python字典中。</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>for quote in response.css(“div.quote”):<br>…     text = quote.css(“span.text::text”).extract_first()<br>…     author = quote.css(“small.author::text”).extract_first()<br>…     tags = quote.css(“div.tags a.tag::text”).extract()<br>…     print(dict(text=text, author=author, tags=tags))<br>{‘tags’: [‘change’, ‘deep-thoughts’, ‘thinking’, ‘world’], ‘author’: ‘Albert Einstein’, ‘text’: ‘“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”’}<br>{‘tags’: [‘abilities’, ‘choices’], ‘author’: ‘J.K. Rowling’, ‘text’: ‘“It is our choices, Harry, that show what we truly are, far more than our abilities.”’}<br>    … a few more of these, omitted for brevity</p><p>使用spider导出数据<br>让我们回到spider。直到现在，仍然没有导出任何数据，只是把HTML页面保存到本地文件中。我们把导出逻辑集成到spider中。</p></blockquote></blockquote></blockquote><p>一个Scrapy蜘蛛通常包含多个页面抓取数据的字典。这样，我们可以使用在回调函数中使用yieldPython关键字，如下所示：</p><p>import scrapy</p><p>class QuotesSpider(scrapy.Spider):<br>    name = “quotes”<br>    start_urls = [<br>        ‘<a href="http://quotes.toscrape.com/page/1/&#39;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/1/&#39;</a>,<br>        ‘<a href="http://quotes.toscrape.com/page/2/&#39;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/2/&#39;</a>,<br>    ]</p><pre><code>def parse(self, response):    for quote in response.css(&apos;div.quote&apos;):        yield {            &apos;text&apos;: quote.css(&apos;span.text::text&apos;).extract_first(),            &apos;author&apos;: quote.css(&apos;span small::text&apos;).extract_first(),            &apos;tags&apos;: quote.css(&apos;div.tags a.tag::text&apos;).extract(),        }</code></pre><p>如果你运行这个蜘蛛，它把导出数据输出到日志中：</p><p>2016-09-19 18:57:19 [scrapy.core.scraper] DEBUG: Scraped from &lt;200 <a href="http://quotes.toscrape.com/page/1/&gt;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/1/&gt;</a><br>{‘tags’: [‘life’, ‘love’], ‘author’: ‘André Gide’, ‘text’: ‘“It is better to be hated for what you are than to be loved for what you are not.”’}<br>2016-09-19 18:57:19 [scrapy.core.scraper] DEBUG: Scraped from &lt;200 <a href="http://quotes.toscrape.com/page/1/&gt;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/1/&gt;</a><br>{‘tags’: [‘edison’, ‘failure’, ‘inspirational’, ‘paraphrased’], ‘author’: ‘Thomas A. Edison’, ‘text’: ““I have not failed. I’ve just found 10,000 ways that won’t work.””}<br>保存抓取到的数据<br>最简单的保存抓取数据是使用Feed exports, 使用下面的命令行：</p><p>scrapy crawl quotes -o quotes.json<br>这将生成一个quotes.json文件包含所有抓取像序列化为json。</p><p>由于历史原因，Scrapy使用追加而不是覆盖，如果你运行两次此命令而没有在第二次删除之前的文件，你将得到一个损毁的JSON文件。</p><p>你也可以使用其他格式，如Json Lines</p><p>scrapy crawl quotes -o quotes.jl<br>Json Lines格式很有用，因为她是stream-like。你可以往里面轻松的添加新纪录。他没有上面的JSON文件的问题当你运行两次的时候。同时，因为每条记录是一行，你可以处理超大文件而不必担心内存问题，有很多工具如JQ可在命令行处理。</p><p>在小项目里（例如此教程），这样就够了。然而，如果你想处理更复杂的抓取项，你可以编写[Item 管道]。当创建项目的时候，会在tutorial/pipelines.py构建一个Item 管道文件。这样如果你只是想保存抓取到的项，就不需要实现任何的Item管道。</p><p>下面的连接<br>假如你不仅想抓取 <a href="http://quotes.toscrape.com网站中的两个页面，而是想抓取所有的网站页面。" target="_blank" rel="noopener">http://quotes.toscrape.com网站中的两个页面，而是想抓取所有的网站页面。</a></p><p>现在你知道如何从页面抓取数据，让我们看看下面的连接如何得到。</p><p>首先从页面中提取我们想要的连接。查看我们的页面，我们可以看见页面中的下一页连接如下所示标志：</p><p><ul class="pager"><br>    <li class="next"><br>        <a href="/page/2/">Next <span aria-hidden="true">→</span></a><br>    </li><br></ul><br>试着在shell中提取它：</p><blockquote><blockquote><blockquote><p>response.css(‘li.next a’).extract_first()<br>‘<a href="/page/2/">Next <span aria-hidden="true">→</span></a>‘<br>这得到了整个anchor元素，但是我们想要href属性。为了如此，Scrapu提供了CSS的扩展使你可以选择属性内容，如下：</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>response.css(‘li.next a::attr(href)’).extract_first()<br>‘/page/2/‘<br>现在我们的spider被改成了可以跟踪下一页从中导出数据：</p></blockquote></blockquote></blockquote><p>import scrapy</p><p>class QuotesSpider(scrapy.Spider):<br>    name = “quotes”<br>    start_urls = [<br>        ‘<a href="http://quotes.toscrape.com/page/1/&#39;" target="_blank" rel="noopener">http://quotes.toscrape.com/page/1/&#39;</a>,<br>    ]</p><pre><code>def parse(self, response):    for quote in response.css(&apos;div.quote&apos;):        yield {            &apos;text&apos;: quote.css(&apos;span.text::text&apos;).extract_first(),            &apos;author&apos;: quote.css(&apos;span small::text&apos;).extract_first(),            &apos;tags&apos;: quote.css(&apos;div.tags a.tag::text&apos;).extract(),        }    next_page = response.css(&apos;li.next a::attr(href)&apos;).extract_first()    if next_page is not None:        next_page = response.urljoin(next_page)        yield scrapy.Request(next_page, callback=self.parse)</code></pre><p>现在，导出数据后，parse()函数查找下一页，使用urljoin构建一个绝对路径URL并生成一个到下一页的新请求，把下一页的请求注册为回调使得蜘蛛可以爬到所有的页面。</p><p>这是Scrapy跟踪页面的机制：当你在回调中生成一个请求对象，Scrapy会安排请求发送并注册回调函数在请求结束时运行。</p><p>使用这些，你可以构建复杂的爬虫系统，链接规则可以自定义，根据访问页面导出各种各样的数据。</p><p>在我们的例子中，它创建了一系列循环跟踪所有的链接到下一页直到找不到任何连接——方便爬取博客，论坛或其他的导航网站。</p><p>更多示例和模式<br>这是另一个蜘蛛用来解释回调和跟踪连接，这次抓取作者信息：</p><p>import scrapy</p><p>class AuthorSpider(scrapy.Spider):<br>    name = ‘author’</p><pre><code>start_urls = [&apos;http://quotes.toscrape.com/&apos;]def parse(self, response):    # follow links to author pages    for href in response.css(&apos;.author+a::attr(href)&apos;).extract():        yield scrapy.Request(response.urljoin(href),                             callback=self.parse_author)    # follow pagination links    next_page = response.css(&apos;li.next a::attr(href)&apos;).extract_first()    if next_page is not None:        next_page = response.urljoin(next_page)        yield scrapy.Request(next_page, callback=self.parse)def parse_author(self, response):    def extract_with_css(query):        return response.css(query).extract_first().strip()    yield {        &apos;name&apos;: extract_with_css(&apos;h3.author-title::text&apos;),        &apos;birthdate&apos;: extract_with_css(&apos;.author-born-date::text&apos;),        &apos;bio&apos;: extract_with_css(&apos;.author-description::text&apos;),    }</code></pre><p>蜘蛛从主页面开始，使用parse_author回调函数跟踪所有的作者页面连接，同时用parse回调函数跟踪导航连接如我们之前看到的。</p><p>parse_author回调函数定义了一个帮助方法，从CSS查询提取和清理并使用作者数据生成Python dict。</p><p>另一件关于蜘蛛的有趣的事情是，即使有很多名言出自同一作者，我们也不必担心多次访问相同作者的页面。默认情况下，Scrapy过滤掉重复的已访问的请求地址，避免程序太多次点击服务器的问题。这是用DUPEFILTER_CLASS配置。</p><p>希望你已理解了Scrapy如何跟踪页面和回调的机制。</p><p>这个程序利用跟踪链接机制实现，查看CrawlSpider类,它是一个通用的蜘蛛实现了一个小的规则引擎，你可以在这之上编写自己的爬虫。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/30/hello-world/"/>
      <url>/2019/01/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
