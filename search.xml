<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java链表基本概念</title>
      <link href="/2019/02/21/java%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/02/21/java%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>链表是一种根据元素节点逻辑关系排列起来的一种数据结构。利用链表可以保存多个数据，这一点类似于数组的概念，但是数组本身有一个缺点—— 数组的长度固定，不可改变，在长度固定的情况下首选的肯定是数组，但是在现实的开发之中往往要保存的内容长度是不确定的，那么此时就可以利用链表这样的结构来代替数组的使用。</p><p>链表是一种最为简单的数据结构，它的主要目的是依靠引用关系来实现多个数据的保存，那么下面假设现在要保存的数据是字符串（引用类型），则可以按照图所示的关系进行保存。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每一个链表实际上就是由多个节点组成的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;    <span class="comment">//定义一个节点</span></span><br><span class="line">  <span class="keyword">private</span> String <span class="keyword">data</span>; <span class="comment">//用于保存数据</span></span><br><span class="line">  <span class="keyword">private</span> Node next;   <span class="comment">//用于保存下一个节点</span></span><br><span class="line">  <span class="comment">//每一个Node类对象都必须保存有响应的数据</span></span><br><span class="line">  <span class="keyword">public</span> Node(String <span class="keyword">data</span>)&#123;</span><br><span class="line">  <span class="keyword">this</span>.<span class="keyword">data</span> = <span class="keyword">data</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> void setNext(Node next)&#123;</span><br><span class="line">  <span class="keyword">this</span>.next = next ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> Node getNext()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.next ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String getData()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">data</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上只是一个专门用来保存节点关系的类，要通过其它方法将所有节点链接起来</p><p>Ø  在进行链表操作的时候，首先需要的是一个根节点（第一个节点即为根节点），之后每一个节点的引用都保存在上一节点的next属性之中，而在进行输出的时候也应该按照节点的先后顺序，一个一个取得每一个节点所包装的数据<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//第一步：准备数据</span></span><br><span class="line">Node root = <span class="keyword">new</span> <span class="type">Node</span>(<span class="string">"火车头"</span>) ;</span><br><span class="line">Node n1 = <span class="keyword">new</span> <span class="type">Node</span>(<span class="string">"车厢A"</span>) ;</span><br><span class="line">Node n2 = <span class="keyword">new</span> <span class="type">Node</span>(<span class="string">"车厢B"</span>) ;</span><br><span class="line"></span><br><span class="line">root.setNext(n1);</span><br><span class="line">n1.setNext(n2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步：取出所有数据</span></span><br><span class="line">Node currentNode = root ;<span class="comment">//从当前根节点开始读取</span></span><br><span class="line"><span class="keyword">while</span>( currentNode !=  <span class="literal">null</span>)&#123;</span><br><span class="line">System.out.println(currentNode.getData()) ;</span><br><span class="line"><span class="comment">//将下一个节点设置为当前节点s</span></span><br><span class="line">currentNode = currentNode.getNext() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，就将他们链接起来了，但是这样的操作在实际使用中很不方便，最好的方法是递归操作完成</p><p>利用递归操作链接节点</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LinkDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line"><span class="comment">//第一步：准备数据</span></span><br><span class="line">Node root = <span class="keyword">new</span> Node(<span class="string">"火车头"</span>) ;</span><br><span class="line">Node n1 = <span class="keyword">new</span> Node(<span class="string">"车厢A"</span>) ;</span><br><span class="line">Node n2 = <span class="keyword">new</span> Node(<span class="string">"车厢B"</span>) ;</span><br><span class="line"></span><br><span class="line">root.setNext(n1);</span><br><span class="line">n1.setNext(n2);</span><br><span class="line">print(root);</span><br><span class="line"><span class="comment">/*//第二步：取出所有数据</span></span><br><span class="line"><span class="comment">Node currentNode = root ;//从当前根节点开始读取</span></span><br><span class="line"><span class="comment">while( currentNode !=  null)&#123;</span></span><br><span class="line"><span class="comment">System.out.println(currentNode.getData()) ;</span></span><br><span class="line"><span class="comment">//将下一个节点设置为当前节点s</span></span><br><span class="line"><span class="comment">currentNode = currentNode.getNext() ;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params">Node current</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>( current == <span class="literal">null</span> )&#123;<span class="comment">//递归结束条件</span></span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println(current.getData()) ;</span><br><span class="line">print( current.getNext() );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就方便很多了，那么还有什么问题呢？</p><p>显然是主方法中配置关系的语句过多，主方法不像一个大管家管理所有的类了，所以要定义一个类，用来专门进行数据间关系的处理，而主方法负责管理就可以了</p><p>完整代码<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每一个链表实际上就是由多个节点组成的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; <span class="comment">// 定义一个节点</span></span><br><span class="line"><span class="keyword">private</span> String <span class="keyword">data</span>; <span class="comment">// 用于保存数据</span></span><br><span class="line"><span class="keyword">private</span> Node next; <span class="comment">// 用于保存下一个节点</span></span><br><span class="line"><span class="comment">// 每一个Node类对象都必须保存有响应的数据</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Node(String <span class="keyword">data</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">data</span> = <span class="keyword">data</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> void setNext(Node next) &#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Node getNext() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.next;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> String getData() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">data</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 实现节点的添加</span></span><br><span class="line"><span class="comment">// 第一次调用（Link）：this代表Link.root</span></span><br><span class="line"><span class="comment">// 第二次调用（Node）：this代表Link.root.next</span></span><br><span class="line"><span class="comment">// 第三次调用（Node）：this代表Link.root.next.next</span></span><br><span class="line"><span class="keyword">public</span> void addNode(Node newNode) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.next == <span class="literal">null</span>) &#123; <span class="comment">// 如果只有一个节点</span></span><br><span class="line"><span class="keyword">this</span>.next = newNode; <span class="comment">// 保存新节点</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前节点后面还有节点</span></span><br><span class="line"><span class="comment">// 当前节点的下一个节点继续保存</span></span><br><span class="line"><span class="keyword">this</span>.next.addNode(newNode);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 第一次调用（Link）：this代表Link.root</span></span><br><span class="line"><span class="comment">// 第二次调用（Node）：this代表Link.root.next</span></span><br><span class="line"><span class="comment">// 第三次调用（Node）：this代表Link.root.next.next</span></span><br><span class="line"><span class="keyword">public</span> void printNode() &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.<span class="keyword">data</span>);<span class="comment">// 输出当前数据</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.next != <span class="literal">null</span>) &#123;<span class="comment">// 如果还有下一个节点</span></span><br><span class="line"><span class="keyword">this</span>.next.printNode();<span class="comment">// 输出下一节点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line"> Link link = new Link() ;</span><br><span class="line"> link.add(<span class="string">"hello"</span>);   <span class="comment">//存放数据</span></span><br><span class="line"> link.add(<span class="string">"world"</span>);</span><br><span class="line"> link.add(<span class="string">"wwww"</span>);</span><br><span class="line"> link.print();     <span class="comment">//展示数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//负责数据的设置和输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node root; <span class="comment">//根节点</span></span><br><span class="line"><span class="comment">//增加数据</span></span><br><span class="line">  <span class="keyword">public</span> void add (String <span class="keyword">data</span>)&#123;</span><br><span class="line">  <span class="comment">//为了设置数据的先后关系，所以将data包装在一个Node类对象</span></span><br><span class="line">  Node newNode = new Node(<span class="keyword">data</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="literal">null</span> )&#123;  <span class="comment">//一个链表只有一个根节点</span></span><br><span class="line">  <span class="keyword">this</span>.root = newNode;  <span class="comment">//将新的节点设置为根节点</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">  <span class="comment">//从root节点后找到合适的位置</span></span><br><span class="line">  <span class="keyword">this</span>.root.addNode(newNode);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//输出数据</span></span><br><span class="line">  <span class="keyword">public</span> void print()&#123;</span><br><span class="line">  <span class="keyword">if</span>( <span class="keyword">this</span>.root != <span class="literal">null</span> )&#123;</span><br><span class="line">  <span class="keyword">this</span>.root.printNode();</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>via <em><a href="https://blog.csdn.net/qq_37199582/article/details/79244657" target="_blank" rel="noopener">https://blog.csdn.net/qq_37199582/article/details/79244657</a></em></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于使用Tomcat容器</title>
      <link href="/2019/02/21/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Tomcat%E5%AE%B9%E5%99%A8/"/>
      <url>/2019/02/21/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Tomcat%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Q：使用Tomcat容器，提示信息: 至少有一个JAR被扫描用于TLD但尚未包含TLD</p><h2 id="A：没有报错，都是些-INFO-级别的输出"><a href="#A：没有报错，都是些-INFO-级别的输出" class="headerlink" title="A：没有报错，都是些 INFO 级别的输出"></a>A：没有报错，都是些 INFO 级别的输出</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dos命令大全</title>
      <link href="/2019/02/21/Dos%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2019/02/21/Dos%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>基础命令<br>1 dir<br>无参数：查看当前所在目录的文件和文件夹。<br>/s：查看当前目录已经其所有子目录的文件和文件夹。<br>/a：查看包括隐含文件的所有文件。<br>/ah：只显示出隐含文件。<br>/w：以紧凑方式（一行显示5个文件）显示文件和文件夹。<br>/p：以分页方式（显示一页之后会自动暂停）显示。<br>|more：前面那个符号是“\”上面的那个，叫做重定向符号，就是把一个<br>命令的结果输出为另外一个命令的参数。more也是一个命令，dir /w |more<br>得到的结果和dir /w /p的结果是一样的。<br>其他的参数大家可以用：dir/?查看。</p><p>2 cd<br>cd 目录名：进入特定的目录。如果看到有个目录显示为：abcdef ghi 就<br>输入：cdabcdef.ghi进入该目录。<br>cd\ 退回到根目录。<br>cd..退回到上一级目录。</p><p>3 md rd<br>md 目录名：建立特定的文件夹。 （dos下面习惯叫目录，win下面习惯叫文<br>件夹。呵呵！）<br>rd 目录名：删除特定的文件夹。</p><p>4 cls<br>清除屏幕。</p><p>5 copy<br>copy 路径\文件名 路径\文件名 ：把一个文件拷贝到另一个地方。</p><p>6 move<br>move 路径\文件名 路径\文件名 ：把一个文件移动（就是剪切+复制）到另<br>一个地方。</p><p>7 del<br>del 文件名：删除一个文件。<br>del .：删除当前文件夹下所有文件。<br>del不能删除文件夹。</p><p>8 deltree<br>删除文件夹和它下面的所有子文件夹还有文件，厉害。。。不要乱用。</p><p>9 format<br>format x: ：x代表盘符，格式化一个分区。在dos下是用fat文件系统格式<br>化的，在windows2000安装的时候会问你要不要转换为ntfs。</p><p>10 type<br>type 文本文件名：显示出文本文件的内容。</p><p>11 edit<br>其实这是个小程序，编辑文本文件用的。</p><p>12 ren<br>ren 旧文件名 新文件名：改文件名。</p><p>二、关于网络的常用命令<br>1 ping<br>ping 主机ip或名字：向目标主机发送4个icmp数据包，测试对方主机是否收<br>到并响应，一般常用于做普通网络是否通畅的测试。但是ping不同不代表网<br>络不通，有可能是目标主机装有防火墙并且阻止了icmp响应。<br>ping -t ：不停的发送数据包。当然都很小，不能称作攻击。有些人自己写<br>了一些类似于ping命令的程序，不停的发送很大的数据包，以阻塞目标主机<br>的网络连接。</p><p>2 net<br>建议是用net /?获取具体帮助信息。实在是有很多参数，参数下面还有参<br>数。常用：net view \主机 来看共享，net start/stop 服务 来启动和停<br>止服务，信使服务个人不太喜欢。</p><p>3 netstat<br>netstat 主机：查看主机当前的tcp/ip连接状态，如端口的状态。</p><p>4 nbtstat<br>nbtstat 主机：查看主机使用的NetBIOS name。</p><p>5 tracert<br>tracert 主机：查看从你自己到目标逐机到底经过了那些路径。如：<br>tracert <a href="http://www.ncie.gov.cn" target="_blank" rel="noopener">www.ncie.gov.cn</a> 然后等待。。。就会看到你经过的一个个路由节<br>点，一般大一点的路由器，如电信的主干路由，除了ip以外，都有英文标示<br>的。</p><p>6 pathping<br>pathping 主机：类似tracert，但可以显示一些tracert不能显示出来的信<br>息。可以自己试试。</p><p>7 ftp<br>字符方式的ftp，我喜欢用；）不用装cuteftp了。</p><p>8 telnet<br>字符方式的远程登录程序，是网络人员极其爱用的远程登录程序。我最近常<br>用来调试邮件服务器。</p><p>9 ipconfig 非常有用的网络配置、排错。。。命令。<br>不加参数显示当前机器的网络接口状态。<br>/all 先是详细的信息。<br>/release 释放当前ip。<br>/renew 重新申请ip。<br>/flushdns 刷新dns缓存。<br>/registerdns 重新栽dns服务器上注册自己。<br>。。。。。。</p><p>10 arp 操作当前的arp缓存。<br>-a 显示arp缓存。<br>-d 删除一条缓存纪录。<br>-s 田家一条缓存纪录。</p><p>11 nslookup 排除dns错误的利器。是一个交互的工具。使用之前请先努力弄清楚dns的作用以及dns的工作原理。</p><p>xcopy是一个外部命令，也就是说，是一个小程序，有的时候会发现软盘上没有，硬盘上也没有。。。昏倒。。。当然勇气来使比copy好用，我喜欢加/e参数。<br>smartdrv.exe 加载磁盘缓存，参数是缓存的大小，单位是kb。<br>如：smartdrv 32768 就是加载32M的缓存。<br>缓存的作用在你安装WIN2K的时候非常明显！不加缓存装WIN2K PRO要3小时左右，加载8M缓存后，只要30分钟。<br>原理是在内存中划分出一块区域，在安装期间不断地把硬盘上的数据读取到那块缓存区域中，充分利用了内存。</p><p>AT和任务计划作用一样。<br>以下是使用方法，可以通过在命令提示符下面输入：AT /?获得帮助。</p><p>AT 命令安排在特定日期和时间运行命令和程序。<br>要使用 AT 命令，计划服务必须已在运行中。 </p><p>AT [\computername] [ [id] [/DELETE] | /DELETE [/YES]]<br>AT [\computername] time [/INTERACTIVE]<br>[ /EVERY:date[,…] | /NEXT:date[,…]] “command”</p><p>\computername 指定远程计算机。 如果省略这个参数，会计划在本地计算机上运行命令。<br>\127.0.0.1代表本机。和不加这个参数意思一样。</p><p>id 指定给已计划命令的识别号。<br>用来识别任务，比如你要添加好几个任务，ID=1就代表第一个喽！</p><p>/delete 删除某个已计划的命令。如果省略 id，<br>计算机上所有已计划的命令都会被删除。<br>/yes 不需要进一步确认时，跟删除所有作业<br>的命令一起使用。<br>time 指定运行命令的时间。<br>/interactive 允许作业在运行时，与当时登录的用户<br>桌面进行交互。<br>/every:date[,…] 每个月或每个星期在指定的日期运行命令。<br>如果省略日期，则默认为在每月的本日运行。<br>/next:date[,…] 指定在下一个指定日期(如，下周四)运行命令。<br>如果省略日期，则默认为在每月的本日运行。<br>“command” 准备运行的 Windows NT 命令或批处理程序。</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中Stack类的用法</title>
      <link href="/2019/02/21/Java%E4%B8%ADStack%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2019/02/21/Java%E4%B8%ADStack%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>java中stack的使用方法，堆栈是一种”后进先出”（LIFO） 的数据结构， 只能在一端进行插入（称为”压栈”） 或删除 （称为”出栈”）数据的操作,下面看示例吧</p><p>JAVA 中，使用 java.util.Stack 类的构造方法创建对象。</p><p> public class Stack extends vector</p><p> 构造方法 ： public Stack() 创建一个空 Stack。</p><p><strong>方法：</strong>  </p><ol><li>public push  （item ）  把项 压入栈顶。其作用与 addElement (item ) 相同。</li></ol><p>参数 item 压入栈顶的项 。 返回： item 参数 ；</p><ol start="2"><li>public pop () 移除栈顶对象，并作为函数的值 返回该对象。</li></ol><p>返回：栈顶对象（Vector 对象的中的最后一项）。</p><p>注意： 如果堆栈是空的 ，抛出异常EmptyStackException 。。。</p><ol start="3"><li>public peek() 查看栈顶对象而不移除它。。</li></ol><p>返回：栈顶对象（Vector 对象的中的最后一项）。</p><p>注意：如果堆栈是空的， 抛出异常EmptyStackException  。。。</p><ol start="4"><li><p>public boolean isEmpty()或者empty() （测试堆栈是否为空。）  当且仅当堆栈中不含任何项时 返回 true，否则 返回 false.</p></li><li><p>public int search  (object o)  返回对象在堆栈中位置， 以 1 为基数， 如果对象 ｏ是栈中的一项，该方法返回距离　栈顶最近的出现位置到栈顶的距离；　栈中最上端项的距离为　１　。　使用equals 方法比较 o 与 堆栈中的项。。。  </p></li></ol><p>参数： o 目标对象；</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package StackAndQueue;</span><br><span class="line"> </span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.<span class="keyword">Stack</span>;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> StackTest &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public static void main(String[] <span class="keyword">args</span>) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">Stack</span> <span class="keyword">stack</span>=new <span class="keyword">Stack</span>();</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"11111, address, 29999.3 三个元素入栈"</span>); </span><br><span class="line"><span class="keyword">stack</span>.push(11111);</span><br><span class="line">printStack(<span class="keyword">stack</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">stack</span>.push(<span class="string">"address"</span>);</span><br><span class="line">printStack(<span class="keyword">stack</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">stack</span>.push(29999.3);</span><br><span class="line">printStack(<span class="keyword">stack</span>);</span><br><span class="line"></span><br><span class="line">String s=new <span class="built_in">String</span>(<span class="string">"address"</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"address在栈中的位置："</span>+<span class="keyword">stack</span>.<span class="keyword">search</span>(s));</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"11111在栈中的位置："</span>+<span class="keyword">stack</span>.<span class="keyword">search</span>(11111));</span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"11111, address, 29999.3 三个元素出栈："</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"元素"</span>+<span class="keyword">stack</span>.pop()+<span class="string">"出栈"</span>);</span><br><span class="line">printStack(<span class="keyword">stack</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"元素"</span>+<span class="keyword">stack</span>.pop()+<span class="string">"出栈"</span>);</span><br><span class="line">printStack(<span class="keyword">stack</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"元素"</span>+<span class="keyword">stack</span>.pop()+<span class="string">"出栈"</span>);</span><br><span class="line">printStack(<span class="keyword">stack</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public static void printStack(<span class="keyword">Stack</span> <span class="keyword">stack</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">stack</span>.empty())</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"栈是空的，没有元素"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"栈中的元素："</span>);</span><br><span class="line">Enumeration items=<span class="keyword">stack</span>.elements();<span class="comment">//获取stack中的元素</span></span><br><span class="line"><span class="keyword">while</span>(items.hasMoreElements())</span><br><span class="line">&#123;</span><br><span class="line">System.<span class="keyword">out</span>.<span class="keyword">print</span>(items.nextElement()+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Stack</span>类</span><br><span class="line"> * 栈：桶型或箱型数据类型，后进先出，相对堆Heap为二叉树类型，可以快速定位并操作</span><br><span class="line"> * <span class="keyword">Stack</span>&lt;<span class="keyword">E</span>&gt;，支持泛型</span><br><span class="line"> * public class <span class="keyword">Stack</span>&lt;<span class="keyword">E</span>&gt; extends Vector&lt;<span class="keyword">E</span>&gt;</span><br><span class="line"> * <span class="keyword">Stack</span>的方法调用的Vector的方法，被synchronized修饰，为线程安全(Vector也是)</span><br><span class="line"> * <span class="keyword">Stack</span> methods：</span><br><span class="line"> * push : 把项压入堆栈顶部 ，并作为此函数的值返回该对象</span><br><span class="line"> * pop : 移除堆栈顶部的对象，并作为此函数的值返回该对象 </span><br><span class="line"> * peek : 查看堆栈顶部的对象，，并作为此函数的值返回该对象，但不从堆栈中移除它</span><br><span class="line"> * empty : 测试堆栈是否为空 </span><br><span class="line"> * search : 返回对象在堆栈中的位置，以 <span class="number">1</span> 为基数 </span><br><span class="line"> * */</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package ca.<span class="built_in">map</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackX</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">stackMethod();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//stack operate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stackMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//定义一个Integer泛型的Stack</span></span><br><span class="line">Stack&lt;Integer&gt; <span class="built_in">stack</span> = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">System.out.println(<span class="string">"新建栈stack是否为空 : "</span>+(<span class="built_in">stack</span>.empty() ? <span class="string">"空"</span> : <span class="built_in">stack</span>.size()));</span><br><span class="line"><span class="comment">//push : 把项压入堆栈顶部，返回值泛型指定的类型</span></span><br><span class="line"><span class="comment">//此处将1到5压入栈中</span></span><br><span class="line"><span class="built_in">stack</span>.push(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"将1到5按顺序压入栈中后为："</span>+<span class="built_in">stack</span>);</span><br><span class="line"><span class="comment">//empty : 测试堆栈是否为空，size() == 0，返回值boolean</span></span><br><span class="line">System.out.println(<span class="string">"值为1~5的栈中stack是否为空 : "</span>+(<span class="built_in">stack</span>.empty() ? <span class="string">"空"</span> : <span class="built_in">stack</span>.size()));</span><br><span class="line"><span class="comment">//search : 返回对象在堆栈中的位置，以 1 为基数，参数：search(Object o) ，返回值int</span></span><br><span class="line"><span class="keyword">int</span> oStack = <span class="built_in">stack</span>.search(<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">"查找栈stack中对象3的位置elementId为 : "</span>+oStack);</span><br><span class="line"><span class="comment">//peek : 查看堆栈顶部的对象，但不从堆栈中移除它，返回值泛型指定的类型</span></span><br><span class="line"><span class="keyword">int</span> topElement =<span class="built_in">stack</span>.peek();</span><br><span class="line">System.out.println(<span class="string">"查看stack的栈顶元素为 : "</span>+topElement);</span><br><span class="line">System.out.println(<span class="string">"peek操作stack后为 : "</span>+<span class="built_in">stack</span>);</span><br><span class="line"><span class="comment">//pop : 移除堆栈顶部的对象，并作为此函数的值返回该对象，返回值泛型指定的类型</span></span><br><span class="line"><span class="keyword">int</span> oRemove = <span class="built_in">stack</span>.pop();</span><br><span class="line">System.out.println(<span class="string">"移除stack栈顶的元素为 : "</span>+oRemove);</span><br><span class="line">System.out.println(<span class="string">"pop操作移除stack栈顶元素后为 : "</span>+<span class="built_in">stack</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><p>新建栈stack是否为空 : 空<br>将1到5按顺序压入栈中后为：[1, 2, 3, 4, 5]<br>值为1~5的栈中stack是否为空 : 5<br>查找栈stack中对象3的位置elementId为 : 3<br>查看stack的栈顶元素为 : 5<br>peek操作stack后为 : [1, 2, 3, 4, 5]<br>移除stack栈顶的元素为 : 5<br>pop操作移除stack栈顶元素后为 : [1, 2, 3, 4]</p><hr><p>Stack的toString()方法继承自Vector的toString()方法；</p><p>Vector的toString()方法super.toString()继承自AbstractList继承自AbstractCollection的toString()方法：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> String toString() &#123;</span><br><span class="line">       Iterator&lt;E&gt; i = iterator();</span><br><span class="line"><span class="keyword">if</span> (! i.hasNext())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"[]"</span>;</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.<span class="keyword">append</span>(<span class="string">'['</span>);</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    E e = i.<span class="keyword">next</span>();</span><br><span class="line">    sb.<span class="keyword">append</span>(e == <span class="keyword">this</span> ? <span class="string">"(this Collection)"</span> : e);</span><br><span class="line">    <span class="keyword">if</span> (! i.hasNext())</span><br><span class="line"><span class="keyword">return</span> sb.<span class="keyword">append</span>(<span class="string">']'</span>).toString();</span><br><span class="line">    sb.<span class="keyword">append</span>(<span class="string">", "</span>);</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>若集合为空，返回  []<br>若集合不为空则 [  加上迭代元素 加上 , 最后集合无元素加上 ] eg：[1, 2, 3, 4]</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java代码实现栈</title>
      <link href="/2019/02/21/java%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
      <url>/2019/02/21/java%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="1-栈的定义："><a href="#1-栈的定义：" class="headerlink" title="1.栈的定义："></a>1.栈的定义：</h1><p>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。栈是允许在同一端进行插入和删除操作的特殊线性表。允许进行插入和删除操作的一端称为栈顶(top)，另一端为栈底(bottom)；栈底固定，而栈顶浮动；栈中元素个数为零时称为空栈。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。<br><img src="https://i.loli.net/2019/02/21/5c6e53fd91f63.png" alt="1152386-20170509190701426-1497633628.png"></p><h1 id="2-java代码实现栈"><a href="#2-java代码实现栈" class="headerlink" title="2.java代码实现栈"></a>2.java代码实现栈</h1><h2 id="数组实现："><a href="#数组实现：" class="headerlink" title="数组实现："></a>数组实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">// 栈的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">stack</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        maxSize = size;</span><br><span class="line">        top = -<span class="number">1</span>;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">char</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">char</span> value)</span> </span>&#123; <span class="comment">// 压入数据</span></span><br><span class="line"></span><br><span class="line">        arr[++top] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">pop</span><span class="params">()</span> </span>&#123; <span class="comment">// 弹出数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr[top--];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">peek</span><span class="params">()</span> </span>&#123; <span class="comment">// 访问栈顶元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr[top];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123; <span class="comment">// 栈是否满了</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxSize - <span class="number">1</span> == top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123; <span class="comment">// 栈是否为空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用栈实现字符串的倒叙输出"><a href="#利用栈实现字符串的倒叙输出" class="headerlink" title="利用栈实现字符串的倒叙输出"></a>利用栈实现字符串的倒叙输出</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Reverse &#123;</span><br><span class="line">    String <span class="keyword">input</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="built_in">Reverse</span>(String <span class="keyword">input</span>) &#123;</span><br><span class="line">        this.<span class="keyword">input</span> = <span class="keyword">input</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String doReverse() &#123;</span><br><span class="line">        <span class="keyword">stack</span> s = new <span class="keyword">stack</span>(<span class="keyword">input</span>.<span class="built_in">length</span>());</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; <span class="keyword">input</span>.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            s.push(<span class="keyword">input</span>.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        String output = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span>(!s.isEmpty())&#123;</span><br><span class="line">            output += s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链栈实现"><a href="#链栈实现" class="headerlink" title="链栈实现"></a>链栈实现</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stack1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Object&gt; a = <span class="keyword">new</span> LinkedList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        a.addFirst(o);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> a.<span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> a.<span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> a.<span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;S</span><br></pre></td></tr></table></figure><ul><li>via <em><a href="https://www.cnblogs.com/y3596597/p/6832225.html" target="_blank" rel="noopener">https://www.cnblogs.com/y3596597/p/6832225.html</a></em></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中动态数组ArrayList类的用法</title>
      <link href="/2019/02/21/Java%E4%B8%AD%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84ArrayList%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2019/02/21/Java%E4%B8%AD%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84ArrayList%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1、什么是ArrayList"><a href="#1、什么是ArrayList" class="headerlink" title="1、什么是ArrayList"></a>1、什么是ArrayList</h1><p>ArrayList就是传说中的动态数组，用MSDN中的说法，就是Array的复杂版本，它提供了如下一些好处：<br>动态的增加和减少元素<br>实现了ICollection和IList接口<br>灵活的设置数组的大小</p><h1 id="2、如何使用ArrayList"><a href="#2、如何使用ArrayList" class="headerlink" title="2、如何使用ArrayList"></a>2、如何使用ArrayList</h1><p>最简单的例子：<br>ArrayList List = new ArrayList();<br>for( int i=0;i &lt;10;i++ ) //给数组增加10个Int元素<br>List.Add(i);<br>//..程序做一些处理<br>List.RemoveAt(5);//将第6个元素移除<br>for( int i=0;i &lt;3;i++ ) //再增加3个元素<br>List.Add(i+20);<br>Int32[] values = (Int32[])List.ToArray(typeof(Int32));//返回ArrayList包含的数组</p><p>这是一个简单的例子，虽然没有包含ArrayList所有的方法，但是可以反映出ArrayList最常用的用法</p><h1 id="3、ArrayList重要的方法和属性"><a href="#3、ArrayList重要的方法和属性" class="headerlink" title="3、ArrayList重要的方法和属性"></a>3、ArrayList重要的方法和属性</h1><h2 id="1）构造器"><a href="#1）构造器" class="headerlink" title="1）构造器"></a>1）构造器</h2><p>ArrayList提供了三个构造器：<br>public ArrayList();<br>默认的构造器，将会以默认（16）的大小来初始化内部的数组<br>public ArrayList(ICollection);<br>用一个ICollection对象来构造，并将该集合的元素添加到ArrayList<br>public ArrayList(int);<br>用指定的大小来初始化内部的数组</p><h2 id="2）IsSynchronized属性和ArrayList-Synchronized方法"><a href="#2）IsSynchronized属性和ArrayList-Synchronized方法" class="headerlink" title="2）IsSynchronized属性和ArrayList.Synchronized方法"></a>2）IsSynchronized属性和ArrayList.Synchronized方法</h2><p>IsSynchronized属性指示当前的ArrayList实例是否支持线程同步，而ArrayList.Synchronized静态方法则会返回一个ArrayList的线程同步的封装。<br>如果使用非线程同步的实例，那么在多线程访问的时候，需要自己手动调用lock来保持线程同步，例如：<br>ArrayList list = new ArrayList();<br>//…<br>lock( list.SyncRoot ) //当ArrayList为非线程包装的时候，SyncRoot属性其实就是它自己，但是为了满足ICollection的SyncRoot定义，这里还是使用SyncRoot来保持源代码的规范性<br>{<br>list.Add( “Add a Item” );<br>}</p><p>如果使用ArrayList.Synchronized方法返回的实例，那么就不用考虑线程同步的问题，这个实例本身就是线程安全的，实际上ArrayList内部实现了一个保证线程同步的内部类，ArrayList.Synchronized返回的就是这个类的实例，它里面的每个属性都是用了lock关键字来保证线程同步。</p><h2 id="3）Count属性和Capacity属性"><a href="#3）Count属性和Capacity属性" class="headerlink" title="3）Count属性和Capacity属性"></a>3）Count属性和Capacity属性</h2><p>Count属性是目前ArrayList包含的元素的数量，这个属性是只读的。<br>Capacity属性是目前ArrayList能够包含的最大数量，可以手动的设置这个属性，但是当设置为小于Count值的时候会引发一个异常。</p><h2 id="4）Add、AddRange、Remove、RemoveAt、RemoveRange、Insert、InsertRange"><a href="#4）Add、AddRange、Remove、RemoveAt、RemoveRange、Insert、InsertRange" class="headerlink" title="4）Add、AddRange、Remove、RemoveAt、RemoveRange、Insert、InsertRange"></a>4）Add、AddRange、Remove、RemoveAt、RemoveRange、Insert、InsertRange</h2><p>这几个方法比较类似<br>Add方法用于添加一个元素到当前列表的末尾<br>AddRange方法用于添加一批元素到当前列表的末尾<br>Remove方法用于删除一个元素，通过元素本身的引用来删除<br>RemoveAt方法用于删除一个元素，通过索引值来删除<br>RemoveRange用于删除一批元素，通过指定开始的索引和删除的数量来删除<br>Insert用于添加一个元素到指定位置，列表后面的元素依次往后移动<br>InsertRange用于从指定位置开始添加一批元素，列表后面的元素依次往后移动</p><p>另外，还有几个类似的方法：<br>Clear方法用于清除现有所有的元素<br>Contains方法用来查找某个对象在不在列表之中</p><p>其他的我就不一一累赘了，大家可以查看MSDN，上面讲的更仔细 </p><h2 id="5）TrimSize方法"><a href="#5）TrimSize方法" class="headerlink" title="5）TrimSize方法"></a>5）TrimSize方法</h2><p>这个方法用于将ArrayList固定到实际元素的大小，当动态数组元素确定不在添加的时候，可以调用这个方法来释放空余的内存。<br>6）ToArray方法<br>这个方法把ArrayList的元素Copy到一个新的数组中。</p><h1 id="4、ArrayList与数组转换"><a href="#4、ArrayList与数组转换" class="headerlink" title="4、ArrayList与数组转换"></a>4、ArrayList与数组转换</h1><h2 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h2><p>ArrayList List = new ArrayList();<br>List.Add(1);<br>List.Add(2);<br>List.Add(3);</p><p>Int32[] values = (Int32[])List.ToArray(typeof(Int32));</p><h2 id="例2："><a href="#例2：" class="headerlink" title="例2："></a>例2：</h2><p>ArrayList List = new ArrayList();<br>List.Add(1);<br>List.Add(2);<br>List.Add(3);</p><p>Int32[] values = new Int32[List.Count];<br>List.CopyTo(values);</p><p>上面介绍了两种从ArrayList转换到数组的方法</p><h2 id="例3："><a href="#例3：" class="headerlink" title="例3："></a>例3：</h2><p>ArrayList List = new ArrayList();<br>List.Add( “string” );<br>List.Add( 1 );<br>//往数组中添加不同类型的元素</p><p>object[] values = List.ToArray(typeof(object)); //正确<br>string[] values = (string[])List.ToArray(typeof(string)); //错误</p><p>和数组不一样，因为可以转换为Object数组，所以往ArrayList里面添加不同类型的元素是不会出错的，但是当调用ArrayList方法的时候，要么传递所有元素都可以正确转型的类型或者Object类型，否则将会抛出无法转型的异常。</p><h1 id="5、ArrayList最佳使用建议"><a href="#5、ArrayList最佳使用建议" class="headerlink" title="5、ArrayList最佳使用建议"></a>5、ArrayList最佳使用建议</h1><p>这一节我们来讨论ArrayList与数组的差别，以及ArrayList的效率问题 </p><h2 id="1）ArrayList是Array的复杂版本"><a href="#1）ArrayList是Array的复杂版本" class="headerlink" title="1）ArrayList是Array的复杂版本"></a>1）ArrayList是Array的复杂版本</h2><p>ArrayList内部封装了一个Object类型的数组，从一般的意义来说，它和数组没有本质的差别，甚</p><p>定到实际元素的大小，当动态数组元素确定不在添加的时候，可以调用这个方法来释放空余的内存。 </p><h2 id="6）ToArray方法"><a href="#6）ToArray方法" class="headerlink" title="6）ToArray方法"></a>6）ToArray方法</h2><p>这个方法把ArrayList的元素Copy到一个新的数组中。 </p><p>和数组不一样，因为可以转换为Object数组，所以往ArrayList里面添加不同类型的元素是不会出错的，但是当调用ArrayList方法的时候，要么传递所有元素都可以正确转型的类型或者Object类型，否则将会抛出无法转型的异常。</p><ul><li>via <em><a href="https://blog.csdn.net/weixin_40165325/article/details/79198304" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40165325/article/details/79198304</a></em></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 基本操作</title>
      <link href="/2019/02/21/CentOS-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/02/21/CentOS-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Vi-基本操作"><a href="#1-Vi-基本操作" class="headerlink" title="1.Vi 基本操作"></a>1.Vi 基本操作</h2><h3 id="1-进入vi"><a href="#1-进入vi" class="headerlink" title="1) 进入vi"></a>1) 进入vi</h3><p> 在系统提示符号输入vi及文件名称后，就进入vi全屏幕编辑画面：<br> $ vi myfile<br> 进入vi之后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」才能够输入文字。</p><h3 id="2-切换至插入模式（Insert-mode）编辑文件"><a href="#2-切换至插入模式（Insert-mode）编辑文件" class="headerlink" title="2) 切换至插入模式（Insert mode）编辑文件"></a>2) 切换至插入模式（Insert mode）编辑文件</h3><p> 在「命令行模式（command mode）」下按一下字母「i」就可以进入「插入模式（Insert mode）」，「ESC」键转到「命令行模式（command mode）</p><h3 id="3-退出vi及保存文件"><a href="#3-退出vi及保存文件" class="headerlink" title="3)  退出vi及保存文件"></a>3)  退出vi及保存文件</h3><p> 在「命令行模式（command mode）」下，按一下「：」冒号键进入「Last line mode」，例如：<br> : w filename （输入 「w filename」将文章以指定的文件名filename保存）<br> : wq (输入「wq」，存盘并退出vi)<br> : q! (输入q!， 不存盘强制退出vi)</p><h2 id="2-CentOS-网络配置"><a href="#2-CentOS-网络配置" class="headerlink" title="2.CentOS 网络配置"></a>2.CentOS 网络配置</h2><h3 id="1）找到-etc-sysconfig-network-scripts-目录下-ifcfg-ens-代表任意数字，修改其中的-onboot-yes-wq-保存并退出，然后重启网络"><a href="#1）找到-etc-sysconfig-network-scripts-目录下-ifcfg-ens-代表任意数字，修改其中的-onboot-yes-wq-保存并退出，然后重启网络" class="headerlink" title="1）找到 /etc/sysconfig/network-scripts 目录下 ifcfg-ens*,  代表任意数字，修改其中的 onboot=yes , :wq 保存并退出，然后重启网络"></a>1）找到 /etc/sysconfig/network-scripts 目录下 ifcfg-ens*<em>, </em> 代表任意数字，修改其中的 onboot=yes , :wq 保存并退出，然后重启网络</h3><p><img src="https://i.loli.net/2019/02/21/5c6e02af79c46.png" alt="01.png"><br><img src="https://i.loli.net/2019/02/21/5c6e02af52444.png" alt="02.png"></p><h3 id="2）重启网络命令"><a href="#2）重启网络命令" class="headerlink" title="2）重启网络命令"></a>2）重启网络命令</h3><p> service network restart</p><h2 id="3-CentOS-图像界面"><a href="#3-CentOS-图像界面" class="headerlink" title="3.CentOS 图像界面"></a>3.CentOS 图像界面</h2><h3 id="1）命令模式进入图形界面"><a href="#1）命令模式进入图形界面" class="headerlink" title="1）命令模式进入图形界面"></a>1）命令模式进入图形界面</h3><p> startx</p><h3 id="2）安装图形界面"><a href="#2）安装图形界面" class="headerlink" title="2）安装图形界面"></a>2）安装图形界面</h3><p> 如果startx 命令不管用，说明没有安装图形界面，命令安装如下：(需要联网)<br> yum groupinstall “GNOME Desktop” “Graphical Administration Tools”</p><h3 id="3）如果想开机直接进入“命令行模式”，可编辑-etc-inittab-文件，设置为-id-3-initdefault"><a href="#3）如果想开机直接进入“命令行模式”，可编辑-etc-inittab-文件，设置为-id-3-initdefault" class="headerlink" title="3）如果想开机直接进入“命令行模式”，可编辑 /etc/inittab 文件，设置为 id:3:initdefault:"></a>3）如果想开机直接进入“命令行模式”，可编辑 /etc/inittab 文件，设置为 id:3:initdefault:</h3><p> 如果想直接进入“窗口模式”，则设置为 id:5:initdefault:<br> 在inittab文件里所有的有效语句都遵守如下格式：<br> id:runlevels:action:process<br> id 可任意起名但不能重复，是唯一标识<br> runlevels  运行级别</p><hr><h2 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h2><p>man   查看帮助信息<br>info  查看帮助信息<br>cd /  切换至根目录   cd ..  切换至上一层目录<br>ls   查看目录下所有文件<br>ls –a &gt; dir.txt ← 将ls –a命令执行结果输出到dir.txt文件<br>ls –a &gt;&gt; dir.txt ← 将ls –a命令执行结果附加到dir.txt文件之后<br>vi   编辑文件<br>cat  查看文件内容<br>pwd  显示当前工作目录<br>touch  新建文件<br>mkdir 创建新目录<br>cp   复制文件或目录<br>mv   移动文件或更改名称<br>rm   删除文件<br>find   查找文件<br>reboot 重启<br>shutdown  -h 关机<br>shutdown  -r 重启</p><hr><ul><li>via <em><a href="https://blog.csdn.net/u010787336/article/details/67634640" target="_blank" rel="noopener">https://blog.csdn.net/u010787336/article/details/67634640</a></em> </li></ul>]]></content>
      
      
      <categories>
          
          <category> ECS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>与Linux挂载有关知识</title>
      <link href="/2019/02/21/%E4%B8%8ELinux%E6%8C%82%E8%BD%BD%E6%9C%89%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/02/21/%E4%B8%8ELinux%E6%8C%82%E8%BD%BD%E6%9C%89%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="linux-centos-中的挂载是什么意思介绍和解释介绍及如何挂载"><a href="#linux-centos-中的挂载是什么意思介绍和解释介绍及如何挂载" class="headerlink" title="linux centos 中的挂载是什么意思介绍和解释介绍及如何挂载"></a><center>linux centos 中的挂载是什么意思介绍和解释介绍及如何挂载</center></h1><h2 id="1、linux-centos-中的挂载是什么意思？"><a href="#1、linux-centos-中的挂载是什么意思？" class="headerlink" title="1、linux centos 中的挂载是什么意思？"></a>1、linux centos 中的挂载是什么意思？</h2><p>Linux系统里是没有盘符的,所有的命令及我们Windows中的盘符都是用目录的形式进行管理,把每一个分区和某一个目录对应。那么,我们对这个目录的操作就是对这个分区的操作,这样就实现了硬件管理手段和软件目录管理手段的统一,这个比如D盘分区和linux系统中根目录/test一一绑定的过程就叫做Linux系统中的挂载。</p><p>那么，如何在linux centos系统中挂载硬盘呢？<br>linux centos 挂载的详细操作步骤：<br>首先远程连接linux服务器，一般可以使用专用的linux连接工具，个人喜好可以按自己选择远程工具，本人推荐常用下载putty工具。</p><h2 id="2、-查看linux-系统服务器上的-磁盘-情况-fdisk-l"><a href="#2、-查看linux-系统服务器上的-磁盘-情况-fdisk-l" class="headerlink" title="2、 查看linux 系统服务器上的 磁盘 情况 fdisk -l"></a>2、 查看linux 系统服务器上的 磁盘 情况 fdisk -l</h2><p>查看结果: 该服务器上有  三块磁盘  一个40G系统盘 另外另个磁盘  即为   个人磁盘    也就是我们需要挂载的磁盘</p><h2 id="3、-linux-centos-磁盘分区命令"><a href="#3、-linux-centos-磁盘分区命令" class="headerlink" title="3、  linux centos 磁盘分区命令"></a>3、  linux centos 磁盘分区命令</h2><p>倘若我们挂载  /dev/xvdc1    10G 磁盘，那么我们可以先  格式化分区   输入  fdisk /dev/xvdc1  </p><p>依次输入:   n    p    1   二次回车   w   即可<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Command (m for <span class="keyword">help</span>):n  </span><br><span class="line">Command <span class="keyword">action</span>  </span><br><span class="line">　　   e    <span class="keyword">extended</span>                  //输入e为创建扩展分区  </span><br><span class="line">　　   p    primary <span class="keyword">partition</span> (<span class="number">1</span><span class="number">-4</span>)      //输入p为创建逻辑分区  </span><br><span class="line">p  </span><br><span class="line">Partion <span class="built_in">number</span>(<span class="number">1</span><span class="number">-4</span>)：<span class="number">1</span>      //在这里输入l，就进入划分逻辑分区阶段了；  </span><br><span class="line"><span class="keyword">First</span> cylinder (<span class="number">51</span><span class="number">-125</span>, <span class="keyword">default</span> <span class="number">51</span>):   //注：这个就是分区的<span class="keyword">Start</span> 值；这里最好直接按回车，如果您输入了一个非默认的数字，会造成空间浪费；  </span><br><span class="line"><span class="keyword">Using</span> <span class="keyword">default</span> <span class="keyword">value</span> <span class="number">51</span>  </span><br><span class="line"><span class="keyword">Last</span> cylinder <span class="keyword">or</span> +<span class="keyword">size</span> <span class="keyword">or</span> +sizeM <span class="keyword">or</span> +sizeK (<span class="number">51</span><span class="number">-125</span>, <span class="keyword">default</span> <span class="number">125</span>): +<span class="number">200</span>M 注：这个是定义分区大小的，+<span class="number">200</span>M 就是大小为<span class="number">200</span>M ；当然您也可以根据p提示的单位cylinder的大小来算，然后来指定 <span class="keyword">End</span>的数值。回头看看是怎么算的；还是用+<span class="number">200</span>M这个办法来添加，这样能直观一点。如果您想添加一个<span class="number">10</span>G左右大小的分区，请输入 +<span class="number">10000</span>M ；  </span><br><span class="line">  </span><br><span class="line">Command (m <span class="keyword">for</span> <span class="keyword">help</span>): w                     //最后输入w回车保存。</span><br></pre></td></tr></table></figure></p><h2 id="4-linux-centos-格式化磁盘命令"><a href="#4-linux-centos-格式化磁盘命令" class="headerlink" title="4. linux centos 格式化磁盘命令"></a>4. linux centos 格式化磁盘命令</h2><p>#mkfs.ext4 /dev/xvdc1</p><h2 id="5-linux-centos-创建目录命令"><a href="#5-linux-centos-创建目录命令" class="headerlink" title="5. linux centos 创建目录命令"></a>5. linux centos 创建目录命令</h2><p>#mkdir /mydisk         用于映射你需要挂载的磁盘, 挂载成功后，每次你只需要访问该目录即是可通过#cd /mydisk访问对应的磁盘分区。</p><h2 id="6-linux-centos-挂载磁盘命令"><a href="#6-linux-centos-挂载磁盘命令" class="headerlink" title="6.linux centos 挂载磁盘命令"></a>6.linux centos 挂载磁盘命令</h2><p>#mount/dev/xvdc1/mydisk意思是将服务器上/dev/xvdc1绑定到你所创建的目录mydisk文件目录上。</p><h2 id="7-linux-centos-配置挂载开机启动-关键步骤"><a href="#7-linux-centos-配置挂载开机启动-关键步骤" class="headerlink" title="7. linux centos 配置挂载开机启动 ,关键步骤"></a>7. linux centos 配置挂载开机启动 ,关键步骤</h2><p>echo “/dev/sdb1/dataext4defaults00” &gt;&gt; /etc/fstab<br>该命令及其重要，因为挂载磁盘操作挂载成功后，重启服务器后会丢失挂载，以至于挂载失效，即要写入开启挂载启动项。</p><p>该命令中，ext4 是对应你的格式化磁盘的类型格式，如我这边的磁盘格式化时用了ext4格式进行格式。</p><h2 id="8-重启linux服务器命令"><a href="#8-重启linux服务器命令" class="headerlink" title="8.  重启linux服务器命令"></a>8.  重启linux服务器命令</h2><p>shutdown -r now</p><hr><ul><li>via <em><a href="https://blog.csdn.net/test18580/article/details/74210603/" target="_blank" rel="noopener">https://blog.csdn.net/test18580/article/details/74210603/</a></em></li></ul>]]></content>
      
      
      <categories>
          
          <category> ECS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux挂载</title>
      <link href="/2019/02/21/Linux%E6%8C%82%E8%BD%BD/"/>
      <url>/2019/02/21/Linux%E6%8C%82%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是挂载？mount的用处在哪？"><a href="#什么是挂载？mount的用处在哪？" class="headerlink" title="什么是挂载？mount的用处在哪？"></a><center>什么是挂载？mount的用处在哪？</center></h1><p>1.提一句Windows下，mount挂载，就是给磁盘分区提供一个盘符（C,D,E,…）。比如插入U盘后系统自动分配给了它I:盘符其实就是挂载，退优盘的时候进行安全弹出，其实就是卸载unmount。</p><p>2.Linux下，不像Windows可以有C,D,E,多个目录，Linux只有一个根目录/。在装系统时，我们分配给linux的所有区都在/下的某个位置，比如/home等等。</p><p>3.提问者插入了新硬盘，分了新磁盘区sdb1。它现在还不属于/。</p><p>4.我们虽然可以在一些图形桌面系统里找到他的位置，浏览管理里面的文件，但在命令行却不知怎么访问它的目录，比如无法使用cd或者ls。也无法在编程时指定一个目录对它操作。</p><p>5.这时提问者使用了 mount /dev/sdb1 ~/Share/ ，把新硬盘的区sdb1挂载到工作目录的~/Share/文件夹下，之后访问这个~/Share/文件夹就相当于访问这个硬盘2的sdb1分区了。对/Share/的任何操作，都相当于对sdb1里文件的操作。</p><p>6.所以Linux下，mount挂载的作用，就是将一个设备（通常是存储设备）挂接到一个已存在的目录上。访问这个目录就是访问该存储设备。</p><p>7.linux操作系统将所有的设备都看作文件，它将整个计算机的资源都整合成一个大的文件目录。我们要访问存储设备中的文件，必须将文件所在的分区挂载到一个已存在的目录上，然后通过访问这个目录来访问存储设备。挂载就是把设备放在一个目录下，让系统知道怎么管理这个设备里的文件，了解这个存储设备的可读写特性之类的过程。</p><p>8.我们不是有/dev/sdb1 吗，直接对它操作不就行了？这不是它的目录吗？</p><p>9.这不是它的目录。虽然/dev是个目录，但/dev/sdb1不是目录。可以发现ls/dev/sdb1无法执行。/dev/sdb1，是一个类似指针的东西，指向这个分区的原始数据块。mount前，系统并不知道这个数据块哪部分数据代表文件，如何对它们操作。</p><p>10.插入CD，系统其实自动执行了 mount /dev/cdrom /media/cdrom。所以可以直接在/media/cdrom中对CD中的内容进行管理。</p><ul><li>via <em><a href="https://blog.csdn.net/qq_39521554/article/details/79501714" target="_blank" rel="noopener">https://blog.csdn.net/qq_39521554/article/details/79501714</a></em></li></ul>]]></content>
      
      
      <categories>
          
          <category> ECS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Python】列表嵌套字典修改字典里面的一个值却把全部的值都修改了</title>
      <link href="/2019/02/20/%E3%80%90Python%E3%80%91%E5%88%97%E8%A1%A8%E5%B5%8C%E5%A5%97%E5%AD%97%E5%85%B8%E4%BF%AE%E6%94%B9%E5%AD%97%E5%85%B8%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%80%E4%B8%AA%E5%80%BC%E5%8D%B4%E6%8A%8A%E5%85%A8%E9%83%A8%E7%9A%84%E5%80%BC%E9%83%BD%E4%BF%AE%E6%94%B9%E4%BA%86/"/>
      <url>/2019/02/20/%E3%80%90Python%E3%80%91%E5%88%97%E8%A1%A8%E5%B5%8C%E5%A5%97%E5%AD%97%E5%85%B8%E4%BF%AE%E6%94%B9%E5%AD%97%E5%85%B8%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%80%E4%B8%AA%E5%80%BC%E5%8D%B4%E6%8A%8A%E5%85%A8%E9%83%A8%E7%9A%84%E5%80%BC%E9%83%BD%E4%BF%AE%E6%94%B9%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>具体问题就是：当我往空列表里面添加字典，需要修改其中的一个键的值的时候，出现把其他同类的值也修改了。</p><p>下面就是出现问题的代码：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aliens = []</span><br><span class="line">new_alien = &#123;"color": "green"&#125;</span><br><span class="line"><span class="section">#往字典里添加5个字典</span></span><br><span class="line">for num in range(5):</span><br><span class="line"><span class="code">    aliens.append(new_alien)</span></span><br><span class="line">print(aliens)</span><br><span class="line"><span class="section">#修改第一个字典的颜色</span></span><br><span class="line">aliens[<span class="string">0</span>][<span class="symbol">"color"</span>] = "blue"</span><br><span class="line">print(aliens)</span><br></pre></td></tr></table></figure></p><p>结果出现全部的值都修改了,如下<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G:\python\python\pra\venv\Scripts\python.exe G:/python/python/pra/day02/列表嵌套字典修改问题<span class="number">5</span>.py</span><br><span class="line">[&#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;, &#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;, &#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;, &#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;, &#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;]</span><br><span class="line">[&#123;<span class="string">'color'</span>: <span class="string">'blue'</span>&#125;, &#123;<span class="string">'color'</span>: <span class="string">'blue'</span>&#125;, &#123;<span class="string">'color'</span>: <span class="string">'blue'</span>&#125;, &#123;<span class="string">'color'</span>: <span class="string">'blue'</span>&#125;, &#123;<span class="string">'color'</span>: <span class="string">'blue'</span>&#125;]</span><br></pre></td></tr></table></figure></p><p>对于解决的办法,我找到了两个:</p><p>第一个:导入copy模块使用深拷贝,再把字典添加到列表里面<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import copy</span><br><span class="line">aliens = []</span><br><span class="line">new_alien = &#123;<span class="string">"color"</span>: <span class="string">"green"</span>&#125;</span><br><span class="line"><span class="comment"># 打印一下原来的地址</span></span><br><span class="line"><span class="builtin-name">print</span>(id(new_alien))</span><br><span class="line"><span class="comment">#往字典里添加5个字典</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(5):</span><br><span class="line">    aliens.append(copy.deepcopy(new_alien))</span><br><span class="line"><span class="builtin-name">print</span>(aliens)</span><br><span class="line"><span class="comment"># 打印列表原来的地址</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    <span class="builtin-name">print</span>(id(alien))</span><br><span class="line"><span class="comment">#修改第一个字典的颜色</span></span><br><span class="line">aliens[0][<span class="string">"color"</span>] = <span class="string">"blue"</span></span><br><span class="line"><span class="builtin-name">print</span>(aliens)</span><br><span class="line"><span class="comment"># 打印列表修改后的地址</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    <span class="builtin-name">print</span>(id(alien))</span><br></pre></td></tr></table></figure></p><p>第二种方法:将需要添加的字典放到for循环里面.<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">aliens = []</span><br><span class="line"><span class="comment">#往字典里添加5个字典</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(5):</span><br><span class="line">    new_alien = &#123;<span class="string">"color"</span>: <span class="string">"green"</span>&#125;</span><br><span class="line">    aliens.append(new_alien)</span><br><span class="line"><span class="builtin-name">print</span>(aliens)</span><br><span class="line"><span class="comment"># 打印列表原来的地址</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    <span class="builtin-name">print</span>(id(alien))</span><br><span class="line"><span class="comment">#修改第一个字典的颜色</span></span><br><span class="line">aliens[0][<span class="string">"color"</span>] = <span class="string">"blue"</span></span><br><span class="line"><span class="builtin-name">print</span>(aliens)</span><br><span class="line"><span class="comment"># 打印列表修改后的地址</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    <span class="builtin-name">print</span>(id(alien))</span><br></pre></td></tr></table></figure></p><p><strong>第一种方法更好一点</strong></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python虚拟路径</title>
      <link href="/2019/02/20/python%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/02/20/python%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-和虚拟路径有关的方法"><a href="#Python-和虚拟路径有关的方法" class="headerlink" title="Python 和虚拟路径有关的方法"></a>Python 和虚拟路径有关的方法</h1><p><img src="https://i.loli.net/2019/02/20/5c6d0b5d8f51b.png" alt="虚拟环境.png"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python实现结构体数组（初始化并赋值）</title>
      <link href="/2019/02/20/python%E5%AE%9E%E7%8E%B0%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84%EF%BC%88%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B9%B6%E8%B5%8B%E5%80%BC%EF%BC%89/"/>
      <url>/2019/02/20/python%E5%AE%9E%E7%8E%B0%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84%EF%BC%88%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B9%B6%E8%B5%8B%E5%80%BC%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="python中结构体数组构建方法"><a href="#python中结构体数组构建方法" class="headerlink" title="python中结构体数组构建方法"></a><center>python中结构体数组构建方法</center></h1><h2 id="方法一：利用NumPy进行操作"><a href="#方法一：利用NumPy进行操作" class="headerlink" title="方法一：利用NumPy进行操作"></a>方法一：利用NumPy进行操作</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">GPSType=np.dtype(&#123;'names':['id','px','py','vx','vy'],'formats':['S32','f','f','f','f']&#125;)</span><br><span class="line"> </span><br><span class="line">Data=np.array([('zero',0.,0.)]*10,dtype=GPSType)  #创建Data[2]</span><br><span class="line"> </span><br><span class="line"><span class="section">#结构体数组中成员赋值</span></span><br><span class="line"><span class="section">#Data[0]</span></span><br><span class="line">Data[<span class="string">0</span>][<span class="symbol">'id'</span>]='00'</span><br><span class="line">Data[<span class="string">0</span>][<span class="symbol">'px'</span>]=1.1</span><br><span class="line">Data[<span class="string">0</span>][<span class="symbol">'py'</span>]=1.2</span><br><span class="line">Data[<span class="string">0</span>][<span class="symbol">'vx'</span>]=1.3</span><br><span class="line">Data[<span class="string">0</span>][<span class="symbol">'vy'</span>]=1.4</span><br><span class="line"> </span><br><span class="line"><span class="section">#Data[1]</span></span><br><span class="line">Data[<span class="string">1</span>][<span class="symbol">'id'</span>]='01'</span><br><span class="line">Data[<span class="string">1</span>][<span class="symbol">'px'</span>]=2.1</span><br><span class="line">Data[<span class="string">1</span>][<span class="symbol">'py'</span>]=2.2</span><br><span class="line">Data[<span class="string">1</span>][<span class="symbol">'vx'</span>]=2.3</span><br><span class="line">Data[<span class="string">1</span>][<span class="symbol">'vy'</span>]=2.4</span><br></pre></td></tr></table></figure><hr><h2 id="方法二：利用Class类进行操作"><a href="#方法二：利用Class类进行操作" class="headerlink" title="方法二：利用Class类进行操作"></a>方法二：利用Class类进行操作</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class GPS:</span><br><span class="line">    pass</span><br><span class="line"> </span><br><span class="line">Data = [GPS()]<span class="number">*2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#Data[0]</span></span><br><span class="line">Data[0].<span class="attribute">id</span>=<span class="string">'00'</span></span><br><span class="line">Data[0].<span class="attribute">px</span>=1.1</span><br><span class="line">Data[0].<span class="attribute">py</span>=1.2</span><br><span class="line">Data[0].<span class="attribute">vx</span>=1.3</span><br><span class="line">Data[0].<span class="attribute">vy</span>=1.4</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Data[1]</span></span><br><span class="line">Data[1].<span class="attribute">id</span>=<span class="string">'01'</span></span><br><span class="line">Data[1].<span class="attribute">px</span>=2.1</span><br><span class="line">Data[1].<span class="attribute">py</span>=2.2</span><br><span class="line">Data[1].<span class="attribute">vx</span>=2.3</span><br><span class="line">Data[1].<span class="attribute">vy</span>=2.4</span><br><span class="line"><span class="builtin-name">print</span>(Data[0],Data[1])</span><br><span class="line"><span class="builtin-name">print</span>(Data[0].px)</span><br></pre></td></tr></table></figure><hr><ul><li>via <em><a href="https://blog.csdn.net/qq_23981335/article/details/83039130" target="_blank" rel="noopener">https://blog.csdn.net/qq_23981335/article/details/83039130</a></em></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java实现结构体数组</title>
      <link href="/2019/02/20/java%E5%AE%9E%E7%8E%B0%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84/"/>
      <url>/2019/02/20/java%E5%AE%9E%E7%8E%B0%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Arrays;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.HashMap;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.LinkedList;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Map;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Queue;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Scanner;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Stack;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p</span></span>&#123;</span><br><span class="line">int x,y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main1</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Scanner <span class="keyword">in</span>=<span class="keyword">new</span> Scanner(System.in); </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">int n=<span class="keyword">in</span>.nextInt();</span><br><span class="line">p a=<span class="keyword">new</span> p();</span><br><span class="line">a.x=<span class="number">10</span>;</span><br><span class="line">p[] b=<span class="keyword">new</span> p[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;<span class="comment">//一定要加入这一句</span></span><br><span class="line">b[i]=<span class="keyword">new</span> p();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">b[i].x=<span class="number">1</span>;</span><br><span class="line">b[i].y=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">System.out.println(b[i].x+b[i].y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java实现遍历一个字符串的每一个字母</title>
      <link href="/2019/02/20/java%E5%AE%9E%E7%8E%B0%E9%81%8D%E5%8E%86%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AF%8D/"/>
      <url>/2019/02/20/java%E5%AE%9E%E7%8E%B0%E9%81%8D%E5%8E%86%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="求字符串中a字符出现的次数"><a href="#求字符串中a字符出现的次数" class="headerlink" title="求字符串中a字符出现的次数"></a>求字符串中a字符出现的次数</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> s = <span class="string">"aaaljlfeakdsflkjsadjaefdsafhaasdasd"</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 出现次数</span></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">       <span class="comment">// 循环遍历每个字符，判断是否是字符 a ，如果是，累加次数</span></span><br><span class="line"><span class="keyword">for</span> (       <span class="comment">//输入代码                   )</span></span><br><span class="line">&#123;</span><br><span class="line">          <span class="comment">// 获取每个字符，判断是否是字符a</span></span><br><span class="line"><span class="keyword">if</span> (     <span class="comment">//输入代码            ) &#123;</span></span><br><span class="line">              <span class="comment">// 累加统计次数</span></span><br><span class="line"><span class="built_in">num</span>++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"字符a出现的次数："</span> + <span class="built_in">num</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (     int <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;s.<span class="built_in">length</span>();<span class="built_in">i</span>++         )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (  s.charAt(<span class="built_in">i</span>)==<span class="string">'a'</span> ) &#123;</span><br><span class="line">num++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-bytes数组"><a href="#2-bytes数组" class="headerlink" title="2 bytes数组"></a>2 bytes数组</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int num = <span class="number">0</span>;</span><br><span class="line">    byte[] bytes=s.getBytes();</span><br><span class="line"><span class="keyword">for</span> (  int <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;bytes.<span class="built_in">length</span>;<span class="built_in">i</span>++       )</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( bytes[<span class="built_in">i</span>]==<span class="string">'a'</span> ) &#123;</span><br><span class="line">num++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-利用数组char"><a href="#3-利用数组char" class="headerlink" title="3.利用数组char"></a>3.利用数组char</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   char[] c=s.toCharArray();   </span><br><span class="line"><span class="keyword">for</span> (   int <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;c.<span class="built_in">length</span>;<span class="built_in">i</span>++    )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (    c[<span class="built_in">i</span>]==<span class="string">'a'</span>    ) &#123;</span><br><span class="line">num++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="4-利用substring（startindex-endindex-字符串的"><a href="#4-利用substring（startindex-endindex-字符串的" class="headerlink" title="4.利用substring（startindex,endindex)字符串的"></a>4.利用substring（startindex,endindex)字符串的</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (   <span class="built_in">int</span> i=<span class="number">0</span>;i&lt;s.length();i++  )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">String</span> s1=s.substring(i,i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (   s1.equals(<span class="string">"a"</span>)) &#123;  <span class="comment">//注意这个地方不能是'a'。</span></span><br><span class="line"><span class="built_in">num</span>++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h1><p><img src="https://i.loli.net/2019/02/20/5c6cac70ede94.png" alt="20180714152652871.png"></p><hr><ul><li>via(<a href="https://blog.csdn.net/weixin_41984985/article/details/81044127" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41984985/article/details/81044127</a>) </li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA手动配置连接MySQL数据库</title>
      <link href="/2019/02/19/IDEA%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/02/19/IDEA%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA手动配置连接MySQL数据库"><a href="#IntelliJ-IDEA手动配置连接MySQL数据库" class="headerlink" title="IntelliJ IDEA手动配置连接MySQL数据库"></a>IntelliJ IDEA手动配置连接MySQL数据库</h1><h2 id="先从菜单View→Tool-Windows→Database打开数据库工具窗口，如下图所示："><a href="#先从菜单View→Tool-Windows→Database打开数据库工具窗口，如下图所示：" class="headerlink" title="先从菜单View→Tool Windows→Database打开数据库工具窗口，如下图所示："></a>先从菜单View→Tool Windows→Database打开数据库工具窗口，如下图所示：</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc36b8c.png" alt="01.png"></p><h2 id="点击Database工具窗口左上角添加按钮“-”，选择数据库类型，这里以MySQL为例，如下图所示："><a href="#点击Database工具窗口左上角添加按钮“-”，选择数据库类型，这里以MySQL为例，如下图所示：" class="headerlink" title="点击Database工具窗口左上角添加按钮“+”，选择数据库类型，这里以MySQL为例，如下图所示："></a>点击Database工具窗口左上角添加按钮“+”，选择数据库类型，这里以MySQL为例，如下图所示：</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc66096.png" alt="02.png"></p><h2 id="填写数据库连接的主机名、数据库名、用户名和密码，如下图所示："><a href="#填写数据库连接的主机名、数据库名、用户名和密码，如下图所示：" class="headerlink" title="填写数据库连接的主机名、数据库名、用户名和密码，如下图所示："></a>填写数据库连接的主机名、数据库名、用户名和密码，如下图所示：</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc6c06c.png" alt="03.png"></p><h2 id="点击Test-Connection按钮进行测试数据库连接是否正常"><a href="#点击Test-Connection按钮进行测试数据库连接是否正常" class="headerlink" title="点击Test Connection按钮进行测试数据库连接是否正常"></a>点击Test Connection按钮进行测试数据库连接是否正常</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc0f3b2.png" alt="04.png"></p><h2 id="下图为连接正常的截图"><a href="#下图为连接正常的截图" class="headerlink" title="下图为连接正常的截图"></a>下图为连接正常的截图</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc6e831.png" alt="05.png"></p><h2 id="连接数据库成功后即可在右侧红框所示窗口内查看当前连接数据库的数据表，左侧红框为选中表的数据，如下图所示："><a href="#连接数据库成功后即可在右侧红框所示窗口内查看当前连接数据库的数据表，左侧红框为选中表的数据，如下图所示：" class="headerlink" title="连接数据库成功后即可在右侧红框所示窗口内查看当前连接数据库的数据表，左侧红框为选中表的数据，如下图所示："></a>连接数据库成功后即可在右侧红框所示窗口内查看当前连接数据库的数据表，左侧红框为选中表的数据，如下图所示：</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc7dcd5.png" alt="06.png"></p><p><em>(via  <a href="https://www.cnblogs.com/jeffen/p/6027970.html" target="_blank" rel="noopener">https://www.cnblogs.com/jeffen/p/6027970.html</a>)</em></p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="testconntction按钮是灰色，无法点击"><a href="#testconntction按钮是灰色，无法点击" class="headerlink" title="testconntction按钮是灰色，无法点击"></a>testconntction按钮是灰色，无法点击</h2><p><strong> 解决方法，点击左下方的download按钮下载所需要的jdbc包<br>   之后点击连接测试会显示successful </strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JSP 连接数据库</title>
      <link href="/2019/02/19/JSP-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/02/19/JSP-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP连接数据库"><a href="#JSP连接数据库" class="headerlink" title="JSP连接数据库"></a>JSP连接数据库</h1><p>本教程假定您已经了解了 JDBC 应用程序的工作方式。在您开始学习 JSP 数据库访问之前，请访问 Java MySQL 连接 来设置相关驱动及配置。</p><p> <strong> 注意 jar包：mysql-connector-java-5.1.39-bin.jar </strong><br> <strong> 下载后把 mysql-connector-java-5.1.39-bin.jar 拷贝到 tomcat 下 lib 目录。 </strong></p><p>从基本概念下手，让我们来创建一个简单的表，并在表中创建几条记录。</p><h2 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h2><p>接下来我们在 MySQL 中创建 RUNOOB 数据库，并创建 websites 数据表，表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`websites`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'站点名称'</span>,</span><br><span class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`alexa`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'Alexa 排名'</span>,</span><br><span class="line">  <span class="string">`country`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'国家'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">10</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>插入一些数据：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">INSERT</span> <span class="selector-tag">INTO</span> `<span class="selector-tag">websites</span>` <span class="selector-tag">VALUES</span> (<span class="string">'1'</span>, <span class="string">'Google'</span>, <span class="string">'https://www.google.cm/'</span>, <span class="string">'1'</span>, <span class="string">'USA'</span>), (<span class="string">'2'</span>, <span class="string">'淘宝'</span>, <span class="string">'https://www.taobao.com/'</span>, <span class="string">'13'</span>, <span class="string">'CN'</span>), (<span class="string">'3'</span>, <span class="string">'菜鸟教程'</span>, <span class="string">'http://www.runoob.com'</span>, <span class="string">'5892'</span>, <span class="string">''</span>), (<span class="string">'4'</span>, <span class="string">'微博'</span>, <span class="string">'http://weibo.com/'</span>, <span class="string">'20'</span>, <span class="string">'CN'</span>), (<span class="string">'5'</span>, <span class="string">'Facebook'</span>, <span class="string">'https://www.facebook.com/'</span>, <span class="string">'3'</span>, <span class="string">'USA'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="SELECT操作"><a href="#SELECT操作" class="headerlink" title="SELECT操作"></a>SELECT操作</h2><p>接下来的这个例子告诉我们如何使用JSTL SQL标签来运行SQL SELECT语句：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.io.*,java.util.*,java.sql.*"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"javax.servlet.http.*,javax.servlet.*"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> <span class="attr">prefix</span>=<span class="string">"sql"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SELECT 操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">JDBC 驱动名及数据库 URL </span></span><br><span class="line"><span class="xml">数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line"><span class="xml">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:setDataSource</span> <span class="attr">var</span>=<span class="string">"snapshot"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span></span><br><span class="line"><span class="xml">     url="jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8"</span></span><br><span class="line"><span class="xml">     user="root"  password="123456"/&gt;</span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:query</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"result"</span>&gt;</span></span></span><br><span class="line"><span class="xml">SELECT * from websites;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:query</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSP 数据库实例 - 菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"row"</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;result.rows&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="INSERT操作"><a href="#INSERT操作" class="headerlink" title="INSERT操作"></a>INSERT操作</h2><p>这个例子告诉我们如何使用JSTL SQL标签来运行SQL INSERT语句：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.io.*,java.util.*,java.sql.*"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"javax.servlet.http.*,javax.servlet.*"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> <span class="attr">prefix</span>=<span class="string">"sql"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SELECT 操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">JDBC 驱动名及数据库 URL </span></span><br><span class="line"><span class="xml">数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line"><span class="xml">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:setDataSource</span> <span class="attr">var</span>=<span class="string">"snapshot"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span></span><br><span class="line"><span class="xml">     url="jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8"</span></span><br><span class="line"><span class="xml">     user="root"  password="123456"/&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">插入数据</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:update</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"result"</span>&gt;</span></span></span><br><span class="line"><span class="xml">INSERT INTO websites (name,url,alexa,country) VALUES ('菜鸟教程移动站', 'http://m.runoob.com', 5093, 'CN');</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:update</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:query</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"result"</span>&gt;</span></span></span><br><span class="line"><span class="xml">SELECT * from websites;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:query</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSP 数据库实例 - 菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"row"</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;result.rows&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="DELETE操作"><a href="#DELETE操作" class="headerlink" title="DELETE操作"></a>DELETE操作</h2><p>这个例子告诉我们如何使用JSTL SQL标签来运行SQL DELETE语句：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.io.*,java.util.*,java.sql.*"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"javax.servlet.http.*,javax.servlet.*"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> <span class="attr">prefix</span>=<span class="string">"sql"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SELECT 操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">JDBC 驱动名及数据库 URL </span></span><br><span class="line"><span class="xml">数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line"><span class="xml">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:setDataSource</span> <span class="attr">var</span>=<span class="string">"snapshot"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span></span><br><span class="line"><span class="xml">     url="jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8"</span></span><br><span class="line"><span class="xml">     user="root"  password="123456"/&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">删除 ID 为 11 的数据</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:update</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"count"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  DELETE FROM websites WHERE Id = ?</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">sql:param</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;11&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:update</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:query</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"result"</span>&gt;</span></span></span><br><span class="line"><span class="xml">SELECT * from websites;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:query</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSP 数据库实例 - 菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"row"</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;result.rows&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="UPDATE操作"><a href="#UPDATE操作" class="headerlink" title="UPDATE操作"></a>UPDATE操作</h2><p>这个例子告诉我们如何使用JSTL SQL标签来运行SQL UPDATE语句：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.io.*,java.util.*,java.sql.*"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"javax.servlet.http.*,javax.servlet.*"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> <span class="attr">prefix</span>=<span class="string">"sql"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SELECT 操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">JDBC 驱动名及数据库 URL </span></span><br><span class="line"><span class="xml">数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line"><span class="xml">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:setDataSource</span> <span class="attr">var</span>=<span class="string">"snapshot"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span></span><br><span class="line"><span class="xml">     url="jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8"</span></span><br><span class="line"><span class="xml">     user="root"  password="123456"/&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">修改 ID 为 3 的名字：菜鸟教程改为 RUNOOB</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"SiteId"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:update</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"count"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  UPDATE websites SET name = 'RUNOOB' WHERE Id = ?</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">sql:param</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;SiteId&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:update</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:query</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"result"</span>&gt;</span></span></span><br><span class="line"><span class="xml">SELECT * from websites;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:query</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSP 数据库实例 - 菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"row"</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;result.rows&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信开发--网页授权access_token与全局access_token获取用户信息的接口</title>
      <link href="/2019/02/19/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83access-token%E4%B8%8E%E5%85%A8%E5%B1%80access-token%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/02/19/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83access-token%E4%B8%8E%E5%85%A8%E5%B1%80access-token%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="微信开发——网页授权access-token与全局access-token获取用户信息的接口"><a href="#微信开发——网页授权access-token与全局access-token获取用户信息的接口" class="headerlink" title="微信开发——网页授权access_token与全局access_token获取用户信息的接口"></a>微信开发——网页授权access_token与全局access_token获取用户信息的接口</h1><h2 id="网页授权access-token"><a href="#网页授权access-token" class="headerlink" title="网页授权access_token"></a>网页授权access_token</h2><p>微信网页授权是通过OAuth2.0机制实现的。在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证——网页授权access_token。通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息。网页授权access_token是通过code换取的凭证，用于获取用户的基本信息，次数不限，时间最长5分钟。</p><p>获取网页授权access_token接口地址为：<br><a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a></p><p>获取code接口地址为:<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></p><p>获取用户信息接口:<br><a href="https://api.weixin.qq.com/sns/userinfo?access_token={0}&amp;openid={1}&amp;lang=zh_CN" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/userinfo?access_token={0}&amp;openid={1}&amp;lang=zh_CN</a></p><h2 id="全局access-token"><a href="#全局access-token" class="headerlink" title="全局access_token"></a>全局access_token</h2><p>其他微信接口需要通过基础支持中的“获取access_token”接口来获取到的全局access_token调用。全局access_token是HTML5网页调用基础接口的全局唯一凭证，有效时间为2小时，每天最多调用2000次。</p><p>获取全局access_token接口地址为：<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</a></p><p>获取用户OpenID接口地址：<br><a href="https://api.weixin.qq.com/cgi-bin/user/info/batchget?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/user/info/batchget?access_token=ACCESS_TOKEN</a></p><p>如果想用这个全局access_token获取用户信息，那么要求用户已经关注了你的公众号。此时才能根据用户的OpenID来获取用户的基本信息。</p>]]></content>
      
      
      <categories>
          
          <category> java-access_token </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2019/02/19/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/02/19/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>相比WYSIWYG编辑器<br>优点：<br>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可<br>缺点：<br>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。<br>还好，简书是支持Markdown编辑模式的。<br>开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器</p><p>一、标题<br>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。<br>示例：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><p>二、字体</p><p>加粗</p><p>要加粗的文字左右分别用两个*号包起来</p><p>斜体</p><p>要倾斜的文字左右分别用一个*号包起来</p><p>斜体加粗</p><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><p>删除线</p><p>要加删除线的文字左右分别用两个<del>号包起来<br>示例：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br>~~这是加删除线的文字</del></p><p>三、引用<br>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用<br>示例：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>四、分割线<br>三个或者三个以上的 - 或者 * 都可以。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><hr><hr><hr><p>五、图片<br>语法：<br><img src="图片地址" alt="图片alt" title="&#39;图片title&#39;"></p><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p><p>示例：<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><p>blockchain</p><p>上传本地图片直接点击导航栏的图片标志，选择图片即可<br>六、超链接<br>语法：<br><a href="超链接地址" title="超链接title">超链接名</a><br>title可加可不加</p><p>示例：<br><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p>效果如下：<br>简书<br>百度<br>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。<br><a href="超链接地址" target="_blank">超链接名</a></p><p>示例<br><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><p>七、列表</p><p>无序列表</p><p>语法：<br>无序列表用 - + * 任何一种都可以</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>注意：- + * 跟内容之间都要有一个空格</p><p>语法：<br>数字加点<br>1.列表内容<br>2.列表内容<br>3.列表内容</p><p>注意：序号跟内容之间要有空格</p><p>列表嵌套</p><p>上一级和下一级之间敲三个空格即可</p><p>八、表格<br>语法：<br>表头|表头|表头<br>—|:–:|—:<br>内容|内容|内容<br>内容|内容|内容</p><p>第二行分割表头和内容。</p><ul><li>有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略</li></ul><p>示例：<br>姓名|技能|排行<br>–|:–:|–:<br>刘备|哭|大哥<br>关羽|打|二哥<br>张飞|骂|三弟</p><p>九、代码<br>语法：<br>单行代码：代码之间分别用一个反引号包起来<br>    <code>代码内容</code></p><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br>(<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">单行代码</span><br><span class="line">`create database hero;`</span><br><span class="line"></span><br><span class="line">代码块</span><br><span class="line">(```)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br><span class="line"></span><br><span class="line">十、流程图</span><br><span class="line">```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>access_token</title>
      <link href="/2019/02/19/access-token/"/>
      <url>/2019/02/19/access-token/</url>
      
        <content type="html"><![CDATA[<p><em>微信公众号之access_token获取与管理</em></p><p>转自：<a href="https://www.cnblogs.com/fengzheng/p/5027630.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengzheng/p/5027630.html</a></p><p>在将access_token之前，还有两个重要参数需要知晓，这两个参数分别是appID和appsecret，这是在申请公众号的时候自动分配给公众号的，相当于公众号的身份标示，在很多接口中需要这两个参数，接下来在请求access_token的时候就需要这两个参数。</p><p>公众号接入成功之后，接下来就要实现相应的逻辑了。在使用微信公众号接口中，发现有许多请求都需要access_token。access_token是公众号的全局唯一凭证，公众号调用各接口时都需使用access_token。开发者需要进行妥善保存。access_token的存储至少要保留512个字符空间。access_token的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的access_token失效。并且每天调用获取access_token接口的上限是2000次。</p><p>总结以上说明，access_token需要做到以下两点：</p><p>1.因为access_token有2个小时的时效性，要有一个机制保证最长2个小时重新获取一次；</p><p>2.因为接口调用上限每天2000次，所以不能调用太频繁；</p><p>就此，这里采用的方案是这样的，定义一个默认启动的servlet，在init方法中启动一个Thread,这个进程中定义一个无限循环的方法，用来获取access_token，当获取成功后，此进程休眠7000秒，否则休眠3秒钟继续获取。流程图如下：</p><p>下面正式开始在工程中实现以上思路，因为返回的数据都是json格式，这里会用到阿里的fastjson库，为构造请求和处理请求后的数据序列化和反序列化提供支持。后续的其它接口也会用到。</p><p>1.定义一个AccessToken实体</p><p>public class AccessToken {<br>    public String getAccessToken() {<br>        return accessToken;<br>    }</p><pre><code>public void setAccessToken(String accessToken) {    this.accessToken = accessToken;}public int getExpiresin() {    return expiresin;}public void setExpiresin(int expiresin) {    this.expiresin = expiresin;}private String accessToken;private int expiresin;</code></pre><p>}<br>2.定义一个默认启动的servlet，在init方法中启动一个Thread，并在web.xml中将这个servlet设置为默认自启动的。</p><p>import javax.servlet.ServletException;<br>import javax.servlet.annotation.WebServlet;<br>import javax.servlet.http.HttpServlet;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import java.io.IOException;</p><p>/**</p><ul><li>Created by huzhicheng on 2015/12/8.<br>*/<br>@WebServlet(name = “AccessTokenServlet”)<br>public class AccessTokenServlet extends HttpServlet {<br> public void init() throws ServletException {<pre><code>TokenThread.appId = getInitParameter(&quot;appid&quot;);  //获取servlet初始参数appid和appsecretTokenThread.appSecret = getInitParameter(&quot;appsecret&quot;);System.out.println(&quot;appid:&quot;+TokenThread.appId);System.out.println(&quot;appSecret:&quot;+TokenThread.appSecret);new Thread(new TokenThread()).start(); //启动进程</code></pre> }<br> protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<br> }<br> protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<br> }<br>}<br>在web.xml中设置servlet自启动，并设置初始化参数appid和appsecret</li></ul><p><servlet><br>        <servlet-name>initAccessTokenServlet</servlet-name><br>        <servlet-class><br>            org.fengzheng.wechat.accesstoken.AccessTokenServlet<br>        </servlet-class><br>        <init-param><br>            <param-name>appid</param-name><br>            <param-value>your appid</param-value><br>        </init-param><br>        <init-param><br>            <param-name>appsecret</param-name><br>            <param-value>your appsecret</param-value><br>        </init-param><br>        <load-on-startup>0</load-on-startup><br> </servlet><br>3.定义Thread类，在此类中调用access_token获取接口，并将得到的数据抽象到静态实体，以便在其它地方使用。接口地址为<a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET，其中grant_type固定写为client_credential即可。此请求为https的get请求，返回的数据格式为{&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200}。" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET，其中grant_type固定写为client_credential即可。此请求为https的get请求，返回的数据格式为{&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200}。</a></p><p>进程类实现如下：</p><p>import com.alibaba.fastjson.JSON;<br>import com.alibaba.fastjson.JSONObject;<br>import org.fengzheng.wechat.common.NetWorkHelper;</p><p>/**</p><ul><li><p>Created by huzhicheng on 2015/11/5.<br>*/<br>public class TokenThread implements Runnable {<br> public static String appId = “”;</p><p> public static String appSecret= “”;<br><br>　　//注意是静态的<br> public static AccessToken accessToken = null;</p><p> public void run(){</p><pre><code>while (true){    try{        accessToken = this.getAccessToken();        if(null!=accessToken){            System.out.println(accessToken.getAccessToken());            Thread.sleep(7000 * 1000); //获取到access_token 休眠7000秒        }else{            Thread.sleep(1000*3); //获取的access_token为空 休眠3秒        }    }catch(Exception e){        System.out.println(&quot;发生异常：&quot;+e.getMessage());        e.printStackTrace();        try{            Thread.sleep(1000*10); //发生异常休眠1秒        }catch (Exception e1){        }    }}</code></pre><p> }</p></li></ul><pre><code>/** * 获取access_token * @return */private AccessToken getAccessToken(){    NetWorkHelper netHelper = new NetWorkHelper();    String Url = String.format(&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=%s&amp;secret=%s&quot;,this.appId,this.appSecret);    String result = netHelper.getHttpsResponse(Url,&quot;&quot;);    System.out.println(result);    //response.getWriter().println(result);    JSONObject json = JSON.parseObject(result);    AccessToken token = new AccessToken();    token.setAccessToken(json.getString(&quot;access_token&quot;));    token.setExpiresin(json.getInteger(&quot;expires_in&quot;));    return token;}</code></pre><p>}<br>其中NetWorkHelper中getHttpsResponse方法是请求一个https地址，参数requestMethod为字符串“GET”或者“POST”，传null或者“”默认为get方式。</p><p>实现如下：</p><p>public String getHttpsResponse(String hsUrl,String requestMethod) {<br>        URL url;<br>        InputStream is = null;<br>        String resultData = “”;<br>        try {<br>            url = new URL(hsUrl);<br>            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();<br>            TrustManager[] tm = {xtm};</p><pre><code>        SSLContext ctx = SSLContext.getInstance(&quot;TLS&quot;);        ctx.init(null, tm, null);        con.setSSLSocketFactory(ctx.getSocketFactory());        con.setHostnameVerifier(new HostnameVerifier() {            @Override            public boolean verify(String arg0, SSLSession arg1) {                return true;            }        });        con.setDoInput(true); //允许输入流，即允许下载        //在android中必须将此项设置为false        con.setDoOutput(false); //允许输出流，即允许上传        con.setUseCaches(false); //不使用缓冲        if(null!=requestMethod &amp;&amp; !requestMethod.equals(&quot;&quot;)) {            con.setRequestMethod(requestMethod); //使用指定的方式        }        else{            con.setRequestMethod(&quot;GET&quot;); //使用get请求        }        is = con.getInputStream();   //获取输入流，此时才真正建立链接        InputStreamReader isr = new InputStreamReader(is);        BufferedReader bufferReader = new BufferedReader(isr);        String inputLine = &quot;&quot;;        while ((inputLine = bufferReader.readLine()) != null) {            resultData += inputLine + &quot;\n&quot;;        }        System.out.println(resultData);        Certificate[] certs = con.getServerCertificates();        int certNum = 1;        for (Certificate cert : certs) {            X509Certificate xcert = (X509Certificate) cert;        }    } catch (Exception e) {        e.printStackTrace();    }    return resultData;}</code></pre><p>X509TrustManager xtm = new X509TrustManager() {<br>        @Override<br>        public X509Certificate[] getAcceptedIssuers() {<br>            // TODO Auto-generated method stub<br>            return null;<br>        }</p><pre><code>    @Override    public void checkServerTrusted(X509Certificate[] arg0, String arg1)            throws CertificateException {        // TODO Auto-generated method stub    }    @Override    public void checkClientTrusted(X509Certificate[] arg0, String arg1)            throws CertificateException {        // TODO Auto-generated method stub    }};</code></pre><p>至此代码实现完毕，将项目部署，看到控制台输出如下：</p><p>　　</p><p>为方面看效果，可以把休眠时间设置短一点，比如30秒获取一次，然后将access_token输出。下面做一个测试jsp页面，并把休眠时间设置为30秒，这样过30秒刷新页面，就可以看到变化，顺便演示一下在其它地方如何拿到access_token</p><p>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;<br>&lt;%@ page import=”org.fengzheng.wechat.accesstoken.TokenThread” %&gt;</p><html><br>  <head><meta name="generator" content="Hexo 3.8.0"><br>    <title></title><br>  </head><br>  <body><br>  access_token为：&lt;%=TokenThread.accessToken.getAccessToken()%&gt;<br>  </body><br></html>]]></content>
      
      
      <categories>
          
          <category> java-access_token </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrpy使用方法</title>
      <link href="/2019/02/01/scrapy%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/01/scrapy%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapy教程center-gt"><a href="#Scrapy教程center-gt" class="headerlink" title="Scrapy教程center&gt;"></a><center>Scrapy教程</center>center&gt;</h1><h2 id="将要抓取-quotes-toscrape-com网站。"><a href="#将要抓取-quotes-toscrape-com网站。" class="headerlink" title="将要抓取 quotes.toscrape.com网站。"></a>将要抓取 quotes.toscrape.com网站。</h2><p>此教程指导你完成以下任务：</p><p><em>新建Scrapy工程<br>编写一个spider爬网站提取数据<br>用命令行导出爬取的数据<br>改变spider递归爬行链接<br>使用spider参数<br>创建一个项目</em><br>在抓取之前，先要构建Scrapy项目：<br>scrapy startproject tutorial<br>此命令创建以下内容的tutorial目录：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tutorial/</span><br><span class="line">    scrapy.cfg            <span class="comment"># deploy configuration file</span></span><br><span class="line"></span><br><span class="line">    tutorial/             <span class="comment"># project's Python module, you'll import your code from here</span></span><br><span class="line">        __init__.py</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">items</span>.py          <span class="comment"># project items definition file</span></span><br><span class="line">    </span><br><span class="line">        pipelines.py      <span class="comment"># project pipelines file</span></span><br><span class="line">    </span><br><span class="line">        settings.py       <span class="comment"># project settings file</span></span><br><span class="line">    </span><br><span class="line">        spiders/          <span class="comment"># a directory where you'll later put your spiders</span></span><br><span class="line">            __init__.py</span><br></pre></td></tr></table></figure></p><h2 id="第一个爬虫"><a href="#第一个爬虫" class="headerlink" title="第一个爬虫"></a>第一个爬虫</h2><p>Spider是定义为爬取网站信息的类。必须继承自scrapy.Spider，定义初始请求，如何选择页面爬取url，以及如何解析页面内容提取数据。</p><p>这是我们第一个Spider的代码，把它保存在tutorial/spiders目录的 quotes_spider.py 中文件。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span>(<span class="title">scrapy</span>.<span class="title">Spider</span>):</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        urls = [</span><br><span class="line">            <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">            <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> <span class="symbol">urls:</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=<span class="keyword">self</span>.parse)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>, response)</span></span><span class="symbol">:</span></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[-<span class="number">2</span>]</span><br><span class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</span><br><span class="line">        with open(filename, <span class="string">'wb'</span>) as <span class="symbol">f:</span></span><br><span class="line">            f.write(response.body)</span><br><span class="line">        <span class="keyword">self</span>.log(<span class="string">'Saved file %s'</span> % filename)</span><br></pre></td></tr></table></figure></p><p>如上，spider继承自 scrapy.Spider<br>并且定义了一些属性和方法。</p><p>name:标识spider。在项目中必须是唯一的，不能给不同的spider设置相同的名称。<br>start_requests():必须返回一个请求的迭代（可以返回一个请求的列表或者写一个生成器函数），spider从这里开始爬去。子序列请求从这些初始的请求自动生成。<br>parse():在每个请求完成时回掉方法。response参数是TextResponse类的实例，包含页面内容和一些选择器等函数操作。<br>parse()函数通常解析html，把抓到的数据提取为dicts，随后查找新的URLS创建新的请求。</p><p>如何运行我们的蜘蛛<br>在项目的最顶层目录运行：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scrapy crawl quotes</span></span><br></pre></td></tr></table></figure></p><p>这条命令执行我们刚添加的名为quotes的蜘蛛。它发送一些请求到quotes.toscrape.com。你将得到如下输出：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">... (omitted for brevity)</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] INFO: Spider opened</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:6023</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (404) &lt;GET http://quotes.toscrape.com/robots.txt&gt; (referer: None)</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/1/&gt; (referer: None)</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/2/&gt; (referer: None)</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [quotes] DEBUG: Saved file quotes<span class="string">-1</span>.html</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [quotes] DEBUG: Saved file quotes<span class="string">-2</span>.html</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] INFO: Closing spider (finished)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>现在，检查当前目录。你会注意到创建了两个新文件quotes-1.html 和quotes-2.html，里面包含了urls的响应数据。</p><p>内部机制是什么<br>Scrapy调用蜘蛛的start_requests方法，一旦接收到一个响应，立马初始化Response对象然后调用请求的回掉函数（在此例中，时parse()函数）把response对象作为参数。</p><p>start_requests函数简写<br>作为start_requests函数的替代，可以定义start_urls的种子列表。默认的start_requests()函数实现中会使用start_urls创建初始请求。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</span><br><span class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure></p><p>urls的每次请求都会调用parse()。这是因为parse()是Scrapy在没有显式给回掉函数赋值时的默认回掉函数。</p><p>提取数据<br>最好的学习使用Scrapy的选择器的方式是使用Scrapy shell。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy <span class="keyword">shell</span><span class="bash"> <span class="string">'http://quotes.toscrape.com/page/1/'</span></span></span><br></pre></td></tr></table></figure></p><p><strong><em>提示<br>记住使用单引号包裹地址否则包含参数（如&amp;字符）将不会工作</em></strong></p><p>在windows中，使用双引号</p><p>你将看到：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[ ... Scrapy log here ... ]</span><br><span class="line"><span class="number">2016</span>-09-<span class="number">19</span> <span class="number">12</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">27</span> [scrapy.core.engine] <span class="symbol">DEBUG:</span> Crawled (<span class="number">200</span>) &lt;GET <span class="symbol">http:</span>/<span class="regexp">/quotes.toscrape.com/page</span><span class="regexp">/1/</span>&gt; (<span class="symbol">referer:</span> None)</span><br><span class="line">[s] Available Scrapy <span class="symbol">objects:</span></span><br><span class="line">[s]   scrapy     scrapy <span class="class"><span class="keyword">module</span> (<span class="title">contains</span> <span class="title">scrapy</span>.<span class="title">Request</span>, <span class="title">scrapy</span>.<span class="title">Selector</span>, <span class="title">etc</span>)</span></span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at <span class="number">0x7fa91d888c90</span>&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET <span class="symbol">http:</span>/<span class="regexp">/quotes.toscrape.com/page</span><span class="regexp">/1/</span>&gt;</span><br><span class="line">[s]   response   &lt;<span class="number">200</span> <span class="symbol">http:</span>/<span class="regexp">/quotes.toscrape.com/page</span><span class="regexp">/1/</span>&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at <span class="number">0x7fa91d888c10</span>&gt;</span><br><span class="line">[s]   spider     &lt;DefaultSpider <span class="string">'default'</span> at <span class="number">0x7fa91c8af990</span>&gt;</span><br><span class="line">[s] Useful <span class="symbol">shortcuts:</span></span><br><span class="line">[s]   shelp()           Shell help (print this help)</span><br><span class="line">[s]   fetch(req_or_url) Fetch request (<span class="keyword">or</span> URL) <span class="keyword">and</span> update local objects</span><br><span class="line">[s]   view(response)    View response <span class="keyword">in</span> a browser</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;在shell中，可以使用response对象的CSS 函数选择元素。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [&lt;Selector xpath=<span class="string">'descendant-or-self::title'</span> data=<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title'</span>)的运行结果是一个名为SelectorList的list-like对象，它是包含XML/HTML元素的 Selector</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 对象列表允许你进一步查询选择和提取数据。</span><br><span class="line"></span><br><span class="line">为了导出title的文本，你可以：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).extract()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'Quotes to Scrape'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 此处有两点要注意：一、我们添加了<span class="symbol">:</span><span class="symbol">:text</span>到CSS查询中，意味着只选择了&lt;title&gt;元素的text属性。如果不指定<span class="symbol">:</span><span class="symbol">:text</span>，我们会得到的是整个title元素。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title'</span>).extract()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 二、.extract()返回SelectorList的文本列表。只取第一个元素的文本：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Quotes to Scrape'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 也可以使用python的列表写法：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>)[<span class="number">0</span>].extract()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Quotes to Scrape'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 但是，使用extract()和extract_first()方法可以在没有找到任何匹配元素时返回None，避免IndexError。</span><br><span class="line"></span><br><span class="line">除了extract()和extract_first()方法，你还可以使用re()的正则表达式方法。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).re(r<span class="string">'Quotes.*'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'Quotes to Scrape'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).re(r<span class="string">'Q\w+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'Quotes'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).re(r<span class="string">'(\w+) to (\w+)'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'Quotes'</span>, <span class="string">'Scrape'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 为了找到适当的CSS选择器，你可从shell中使用view(response)浏览响应界面。你可以使用浏览器开发工具或插件如Firebug（此处请看使用Firebug 抓取和使用FireFox抓取）。</span><br></pre></td></tr></table></figure></p><p>选择器小工具也是一个查找CSS选择器很好的工具，可以可视化的查找元素，可在很多浏览器中工作。</p><p>XPATH:简介<br>除了css，Scrapy选择器也支持XPath表达式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.xpath(<span class="string">'//title'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [&lt;Selector xpath=<span class="string">'//title'</span> data=<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.xpath(<span class="string">'//title/text()'</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Quotes to Scrape'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; XPATH表达式很强大，是Scrapy选择器的基础。事实上，CSS选择器在内部转换为Xpath。你可以在shell查看文本选择器的对象类型。</span><br></pre></td></tr></table></figure></p><p>尽管不如CSS选择器流行，Xpath表达式却更强大。它除了可以导航到结构也可以查找内容。使用xpath，你能这么选择如：选择包含Next Page的文本连接。这使得xpath非常适合抓取，我们鼓励你学习Xpath，即使你已经知道如何构造CSS选择器，它会更简单。</p><p>我们在这不会涉及XPath太多，你可以阅读使用XPath.为了学习Xpath，我们建议通过例子学习XPath教程，和如何使用XPath思考。</p><p>提取quotes和authors<br>现在你知道了一点关于选择和提取的知识了，让我们完善我们的spider，写代码从网站页面提取quotes。</p><p><a href="http://quotes.toscrape.com中的每个quote的HTML形式类似下面：" target="_blank" rel="noopener">http://quotes.toscrape.com中的每个quote的HTML形式类似下面：</a><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> class=<span class="string">"quote"</span>&gt;</span><br><span class="line">    &lt;span class=<span class="string">"text"</span>&gt;“The world <span class="keyword">as</span> we have created <span class="keyword">it</span> is <span class="keyword">a</span> <span class="built_in">process</span> <span class="keyword">of</span> our</span><br><span class="line">    thinking. It cannot be changed <span class="keyword">without</span> changing our thinking.”&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">        <span class="keyword">by</span> &lt;small class=<span class="string">"author"</span>&gt;Albert Einstein&lt;/small&gt;</span><br><span class="line">        &lt;<span class="keyword">a</span> href=<span class="string">"/author/Albert-Einstein"</span>&gt;(about)&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> class=<span class="string">"tags"</span>&gt;</span><br><span class="line">        Tags:</span><br><span class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/change/page/1/"</span>&gt;change&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/deep-thoughts/page/1/"</span>&gt;deep-thoughts&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/thinking/page/1/"</span>&gt;thinking&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/world/page/1/"</span>&gt;world&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>打开scrapy shell尝试提取我们想要的数据。</p><p>$ scrapy shell ‘<a href="http://quotes.toscrape.com&#39;" target="_blank" rel="noopener">http://quotes.toscrape.com&#39;</a><br>我们使用下面语法得到一系列的quote元素的选择器：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">"div.quote"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 每个选择器都可以查询它们的子元素。我们把第一个选择器赋值给变量，这样我们可以直接运行指定的quote选择器。</span><br><span class="line"></span><br><span class="line">quote = response.css(<span class="string">"div.quote"</span>)[<span class="number">0</span>]</span><br><span class="line">现在我们从quote导出title,author和tags使用我们刚创建的quote对象。当你知道你只需要第一个结果时，你可以：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; title = quote.css(<span class="string">"span.text::text"</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; title</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; author = quote.css(<span class="string">"small.author::text"</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; author</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Albert Einstein'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 考虑到标签是字符串列表，我们可以使用.extract()方法获取他们。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; tags = quote.css(<span class="string">"div.tags a.tag::text"</span>).extract()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; tags</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'change'</span>, <span class="string">'deep-thoughts'</span>, <span class="string">'thinking'</span>, <span class="string">'world'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 解决了如何导出每个，我们现在可迭代所有quotes元素把他们保存到Python字典中。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; for quote in response.css(<span class="string">"div.quote"</span>)<span class="symbol">:</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ...     text = quote.css(<span class="string">"span.text::text"</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ...     author = quote.css(<span class="string">"small.author::text"</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ...     tags = quote.css(<span class="string">"div.tags a.tag::text"</span>).extract()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ...     print(dict(text=text, author=author, tags=tags))</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; &#123;<span class="string">'tags'</span>: [<span class="string">'change'</span>, <span class="string">'deep-thoughts'</span>, <span class="string">'thinking'</span>, <span class="string">'world'</span>], <span class="string">'author'</span>: <span class="string">'Albert Einstein'</span>, <span class="string">'text'</span>: <span class="string">'“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; &#123;<span class="string">'tags'</span>: [<span class="string">'abilities'</span>, <span class="string">'choices'</span>], <span class="string">'author'</span>: <span class="string">'J.K. Rowling'</span>, <span class="string">'text'</span>: <span class="string">'“It is our choices, Harry, that show what we truly are, far more than our abilities.”'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;     ... a few more of these, omitted for brevity</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 使用spider导出数据</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 让我们回到spider。直到现在，仍然没有导出任何数据，只是把HTML页面保存到本地文件中。我们把导出逻辑集成到spider中。</span><br></pre></td></tr></table></figure></p><p>一个Scrapy蜘蛛通常包含多个页面抓取数据的字典。这样，我们可以使用在回调函数中使用yieldPython关键字，如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'span small::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>如果你运行这个蜘蛛，它把导出数据输出到日志中：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">09</span>-<span class="number">19</span> <span class="number">18</span>:<span class="number">57</span>:<span class="number">19</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.scraper</span>] DEBUG: Scraped from &lt;<span class="number">200</span> http:<span class="comment">//quotes.toscrape.com/page/1/&gt;</span></span><br><span class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'life'</span>, <span class="string">'love'</span>], <span class="string">'author'</span>: <span class="string">'André Gide'</span>, <span class="string">'text'</span>: <span class="string">'“It is better to be hated for what you are than to be loved for what you are not.”'</span>&#125;</span><br><span class="line"><span class="number">2016</span>-<span class="number">09</span>-<span class="number">19</span> <span class="number">18</span>:<span class="number">57</span>:<span class="number">19</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.scraper</span>] DEBUG: Scraped from &lt;<span class="number">200</span> http:<span class="comment">//quotes.toscrape.com/page/1/&gt;</span></span><br><span class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'edison'</span>, <span class="string">'failure'</span>, <span class="string">'inspirational'</span>, <span class="string">'paraphrased'</span>], <span class="string">'author'</span>: <span class="string">'Thomas A. Edison'</span>, <span class="string">'text'</span>: <span class="string">"“I have not failed. I've just found 10,000 ways that won't work.”"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>保存抓取到的数据<br>最简单的保存抓取数据是使用Feed exports, 使用下面的命令行：</p><p>scrapy crawl quotes -o quotes.json<br>这将生成一个quotes.json文件包含所有抓取像序列化为json。</p><p>由于历史原因，Scrapy使用追加而不是覆盖，如果你运行两次此命令而没有在第二次删除之前的文件，你将得到一个损毁的JSON文件。</p><p>你也可以使用其他格式，如Json Lines</p><p>scrapy crawl quotes -o quotes.jl<br>Json Lines格式很有用，因为她是stream-like。你可以往里面轻松的添加新纪录。他没有上面的JSON文件的问题当你运行两次的时候。同时，因为每条记录是一行，你可以处理超大文件而不必担心内存问题，有很多工具如JQ可在命令行处理。</p><p>在小项目里（例如此教程），这样就够了。然而，如果你想处理更复杂的抓取项，你可以编写[Item 管道]。当创建项目的时候，会在tutorial/pipelines.py构建一个Item 管道文件。这样如果你只是想保存抓取到的项，就不需要实现任何的Item管道。</p><p>下面的连接<br>假如你不仅想抓取 <a href="http://quotes.toscrape.com网站中的两个页面，而是想抓取所有的网站页面。" target="_blank" rel="noopener">http://quotes.toscrape.com网站中的两个页面，而是想抓取所有的网站页面。</a></p><p>现在你知道如何从页面抓取数据，让我们看看下面的连接如何得到。</p><p>首先从页面中提取我们想要的连接。查看我们的页面，我们可以看见页面中的下一页连接如下所示标志：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/2/"</span>&gt;</span>Next <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>→<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>试着在shell中提取它：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'li.next a'</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'&lt;a href="/page/2/"&gt;Next &lt;span aria-hidden="true"&gt;→&lt;/span&gt;&lt;/a&gt;'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 这得到了整个anchor元素，但是我们想要href属性。为了如此，Scrapu提供了CSS的扩展使你可以选择属性内容，如下：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'/page/2/'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 现在我们的spider被改成了可以跟踪下一页从中导出数据：</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'span small::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            next_page = response.urljoin(next_page)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=self.parse)</span><br></pre></td></tr></table></figure><p>现在，导出数据后，parse()函数查找下一页，使用urljoin构建一个绝对路径URL并生成一个到下一页的新请求，把下一页的请求注册为回调使得蜘蛛可以爬到所有的页面。</p><p>这是Scrapy跟踪页面的机制：当你在回调中生成一个请求对象，Scrapy会安排请求发送并注册回调函数在请求结束时运行。</p><p>使用这些，你可以构建复杂的爬虫系统，链接规则可以自定义，根据访问页面导出各种各样的数据。</p><p>在我们的例子中，它创建了一系列循环跟踪所有的链接到下一页直到找不到任何连接——方便爬取博客，论坛或其他的导航网站。</p><p>更多示例和模式<br>这是另一个蜘蛛用来解释回调和跟踪连接，这次抓取作者信息：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSpider</span>(<span class="title">scrapy</span>.<span class="title">Spider</span>):</span></span><br><span class="line">    name = <span class="string">'author'</span></span><br><span class="line"></span><br><span class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>, response)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># follow links to author pages</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.author+a::attr(href)'</span>).extract()<span class="symbol">:</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(response.urljoin(href),</span><br><span class="line">                                 callback=<span class="keyword">self</span>.parse_author)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># follow pagination links</span></span><br><span class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_page is <span class="keyword">not</span> <span class="symbol">None:</span></span><br><span class="line">            next_page = response.urljoin(next_page)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=<span class="keyword">self</span>.parse)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_author</span><span class="params">(<span class="keyword">self</span>, response)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">extract_with_css</span><span class="params">(query)</span></span><span class="symbol">:</span></span><br><span class="line">            <span class="keyword">return</span> response.css(query).extract_first().strip()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'name'</span>: extract_with_css(<span class="string">'h3.author-title::text'</span>),</span><br><span class="line">            <span class="string">'birthdate'</span>: extract_with_css(<span class="string">'.author-born-date::text'</span>),</span><br><span class="line">            <span class="string">'bio'</span>: extract_with_css(<span class="string">'.author-description::text'</span>),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>蜘蛛从主页面开始，使用parse_author回调函数跟踪所有的作者页面连接，同时用parse回调函数跟踪导航连接如我们之前看到的。</p><p>parse_author回调函数定义了一个帮助方法，从CSS查询提取和清理并使用作者数据生成Python dict。</p><p>另一件关于蜘蛛的有趣的事情是，即使有很多名言出自同一作者，我们也不必担心多次访问相同作者的页面。默认情况下，Scrapy过滤掉重复的已访问的请求地址，避免程序太多次点击服务器的问题。这是用DUPEFILTER_CLASS配置。</p><p>希望你已理解了Scrapy如何跟踪页面和回调的机制。</p><p>这个程序利用跟踪链接机制实现，查看CrawlSpider类,它是一个通用的蜘蛛实现了一个小的规则引擎，你可以在这之上编写自己的爬虫。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/30/hello-world/"/>
      <url>/2019/01/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
