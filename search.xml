<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python虚拟路径</title>
      <link href="/2019/02/20/python%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/02/20/python%E8%99%9A%E6%8B%9F%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-和虚拟路径有关的方法"><a href="#Python-和虚拟路径有关的方法" class="headerlink" title="Python 和虚拟路径有关的方法"></a>Python 和虚拟路径有关的方法</h1><p><img src="https://i.loli.net/2019/02/20/5c6d0b5d8f51b.png" alt="虚拟环境.png"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python实现结构体数组（初始化并赋值）</title>
      <link href="/2019/02/20/python%E5%AE%9E%E7%8E%B0%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84%EF%BC%88%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B9%B6%E8%B5%8B%E5%80%BC%EF%BC%89/"/>
      <url>/2019/02/20/python%E5%AE%9E%E7%8E%B0%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84%EF%BC%88%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B9%B6%E8%B5%8B%E5%80%BC%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="python中结构体数组构建方法"><a href="#python中结构体数组构建方法" class="headerlink" title="python中结构体数组构建方法"></a><center>python中结构体数组构建方法</center></h1><h2 id="方法一：利用NumPy进行操作"><a href="#方法一：利用NumPy进行操作" class="headerlink" title="方法一：利用NumPy进行操作"></a>方法一：利用NumPy进行操作</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"> </span><br><span class="line">GPSType=np.dtype(&#123;'names':['id','px','py','vx','vy'],'formats':['S32','f','f','f','f']&#125;)</span><br><span class="line"> </span><br><span class="line">Data=np.array([('zero',0.,0.)]*10,dtype=GPSType)  #创建Data[2]</span><br><span class="line"> </span><br><span class="line"><span class="section">#结构体数组中成员赋值</span></span><br><span class="line"><span class="section">#Data[0]</span></span><br><span class="line">Data[<span class="string">0</span>][<span class="symbol">'id'</span>]='00'</span><br><span class="line">Data[<span class="string">0</span>][<span class="symbol">'px'</span>]=1.1</span><br><span class="line">Data[<span class="string">0</span>][<span class="symbol">'py'</span>]=1.2</span><br><span class="line">Data[<span class="string">0</span>][<span class="symbol">'vx'</span>]=1.3</span><br><span class="line">Data[<span class="string">0</span>][<span class="symbol">'vy'</span>]=1.4</span><br><span class="line"> </span><br><span class="line"><span class="section">#Data[1]</span></span><br><span class="line">Data[<span class="string">1</span>][<span class="symbol">'id'</span>]='01'</span><br><span class="line">Data[<span class="string">1</span>][<span class="symbol">'px'</span>]=2.1</span><br><span class="line">Data[<span class="string">1</span>][<span class="symbol">'py'</span>]=2.2</span><br><span class="line">Data[<span class="string">1</span>][<span class="symbol">'vx'</span>]=2.3</span><br><span class="line">Data[<span class="string">1</span>][<span class="symbol">'vy'</span>]=2.4</span><br></pre></td></tr></table></figure><hr><h2 id="方法二：利用Class类进行操作"><a href="#方法二：利用Class类进行操作" class="headerlink" title="方法二：利用Class类进行操作"></a>方法二：利用Class类进行操作</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class GPS:</span><br><span class="line">    pass</span><br><span class="line"> </span><br><span class="line">Data = [GPS()]<span class="number">*2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#Data[0]</span></span><br><span class="line">Data[0].<span class="attribute">id</span>=<span class="string">'00'</span></span><br><span class="line">Data[0].<span class="attribute">px</span>=1.1</span><br><span class="line">Data[0].<span class="attribute">py</span>=1.2</span><br><span class="line">Data[0].<span class="attribute">vx</span>=1.3</span><br><span class="line">Data[0].<span class="attribute">vy</span>=1.4</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Data[1]</span></span><br><span class="line">Data[1].<span class="attribute">id</span>=<span class="string">'01'</span></span><br><span class="line">Data[1].<span class="attribute">px</span>=2.1</span><br><span class="line">Data[1].<span class="attribute">py</span>=2.2</span><br><span class="line">Data[1].<span class="attribute">vx</span>=2.3</span><br><span class="line">Data[1].<span class="attribute">vy</span>=2.4</span><br><span class="line"><span class="builtin-name">print</span>(Data[0],Data[1])</span><br><span class="line"><span class="builtin-name">print</span>(Data[0].px)</span><br></pre></td></tr></table></figure><hr><ul><li>via <em><a href="https://blog.csdn.net/qq_23981335/article/details/83039130" target="_blank" rel="noopener">https://blog.csdn.net/qq_23981335/article/details/83039130</a></em></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java实现结构体数组</title>
      <link href="/2019/02/20/java%E5%AE%9E%E7%8E%B0%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84/"/>
      <url>/2019/02/20/java%E5%AE%9E%E7%8E%B0%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Arrays;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.HashMap;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.LinkedList;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Map;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Queue;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Scanner;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.Stack;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p</span></span>&#123;</span><br><span class="line">int x,y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main1</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Scanner <span class="keyword">in</span>=<span class="keyword">new</span> Scanner(System.in); </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">int n=<span class="keyword">in</span>.nextInt();</span><br><span class="line">p a=<span class="keyword">new</span> p();</span><br><span class="line">a.x=<span class="number">10</span>;</span><br><span class="line">p[] b=<span class="keyword">new</span> p[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;<span class="comment">//一定要加入这一句</span></span><br><span class="line">b[i]=<span class="keyword">new</span> p();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">b[i].x=<span class="number">1</span>;</span><br><span class="line">b[i].y=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">System.out.println(b[i].x+b[i].y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java实现遍历一个字符串的每一个字母</title>
      <link href="/2019/02/20/java%E5%AE%9E%E7%8E%B0%E9%81%8D%E5%8E%86%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AF%8D/"/>
      <url>/2019/02/20/java%E5%AE%9E%E7%8E%B0%E9%81%8D%E5%8E%86%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="求字符串中a字符出现的次数"><a href="#求字符串中a字符出现的次数" class="headerlink" title="求字符串中a字符出现的次数"></a>求字符串中a字符出现的次数</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> s = <span class="string">"aaaljlfeakdsflkjsadjaefdsafhaasdasd"</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 出现次数</span></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">       <span class="comment">// 循环遍历每个字符，判断是否是字符 a ，如果是，累加次数</span></span><br><span class="line"><span class="keyword">for</span> (       <span class="comment">//输入代码                   )</span></span><br><span class="line">&#123;</span><br><span class="line">          <span class="comment">// 获取每个字符，判断是否是字符a</span></span><br><span class="line"><span class="keyword">if</span> (     <span class="comment">//输入代码            ) &#123;</span></span><br><span class="line">              <span class="comment">// 累加统计次数</span></span><br><span class="line"><span class="built_in">num</span>++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"字符a出现的次数："</span> + <span class="built_in">num</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (     int <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;s.<span class="built_in">length</span>();<span class="built_in">i</span>++         )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (  s.charAt(<span class="built_in">i</span>)==<span class="string">'a'</span> ) &#123;</span><br><span class="line">num++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-bytes数组"><a href="#2-bytes数组" class="headerlink" title="2 bytes数组"></a>2 bytes数组</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int num = <span class="number">0</span>;</span><br><span class="line">    byte[] bytes=s.getBytes();</span><br><span class="line"><span class="keyword">for</span> (  int <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;bytes.<span class="built_in">length</span>;<span class="built_in">i</span>++       )</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( bytes[<span class="built_in">i</span>]==<span class="string">'a'</span> ) &#123;</span><br><span class="line">num++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-利用数组char"><a href="#3-利用数组char" class="headerlink" title="3.利用数组char"></a>3.利用数组char</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   char[] c=s.toCharArray();   </span><br><span class="line"><span class="keyword">for</span> (   int <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;c.<span class="built_in">length</span>;<span class="built_in">i</span>++    )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (    c[<span class="built_in">i</span>]==<span class="string">'a'</span>    ) &#123;</span><br><span class="line">num++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="4-利用substring（startindex-endindex-字符串的"><a href="#4-利用substring（startindex-endindex-字符串的" class="headerlink" title="4.利用substring（startindex,endindex)字符串的"></a>4.利用substring（startindex,endindex)字符串的</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (   <span class="built_in">int</span> i=<span class="number">0</span>;i&lt;s.length();i++  )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">String</span> s1=s.substring(i,i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (   s1.equals(<span class="string">"a"</span>)) &#123;  <span class="comment">//注意这个地方不能是'a'。</span></span><br><span class="line"><span class="built_in">num</span>++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h1><p><img src="https://i.loli.net/2019/02/20/5c6cac70ede94.png" alt="20180714152652871.png"></p><hr><ul><li>via(<a href="https://blog.csdn.net/weixin_41984985/article/details/81044127" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41984985/article/details/81044127</a>) </li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA手动配置连接MySQL数据库</title>
      <link href="/2019/02/19/IDEA%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/02/19/IDEA%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA手动配置连接MySQL数据库"><a href="#IntelliJ-IDEA手动配置连接MySQL数据库" class="headerlink" title="IntelliJ IDEA手动配置连接MySQL数据库"></a>IntelliJ IDEA手动配置连接MySQL数据库</h1><h2 id="先从菜单View→Tool-Windows→Database打开数据库工具窗口，如下图所示："><a href="#先从菜单View→Tool-Windows→Database打开数据库工具窗口，如下图所示：" class="headerlink" title="先从菜单View→Tool Windows→Database打开数据库工具窗口，如下图所示："></a>先从菜单View→Tool Windows→Database打开数据库工具窗口，如下图所示：</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc36b8c.png" alt="01.png"></p><h2 id="点击Database工具窗口左上角添加按钮“-”，选择数据库类型，这里以MySQL为例，如下图所示："><a href="#点击Database工具窗口左上角添加按钮“-”，选择数据库类型，这里以MySQL为例，如下图所示：" class="headerlink" title="点击Database工具窗口左上角添加按钮“+”，选择数据库类型，这里以MySQL为例，如下图所示："></a>点击Database工具窗口左上角添加按钮“+”，选择数据库类型，这里以MySQL为例，如下图所示：</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc66096.png" alt="02.png"></p><h2 id="填写数据库连接的主机名、数据库名、用户名和密码，如下图所示："><a href="#填写数据库连接的主机名、数据库名、用户名和密码，如下图所示：" class="headerlink" title="填写数据库连接的主机名、数据库名、用户名和密码，如下图所示："></a>填写数据库连接的主机名、数据库名、用户名和密码，如下图所示：</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc6c06c.png" alt="03.png"></p><h2 id="点击Test-Connection按钮进行测试数据库连接是否正常"><a href="#点击Test-Connection按钮进行测试数据库连接是否正常" class="headerlink" title="点击Test Connection按钮进行测试数据库连接是否正常"></a>点击Test Connection按钮进行测试数据库连接是否正常</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc0f3b2.png" alt="04.png"></p><h2 id="下图为连接正常的截图"><a href="#下图为连接正常的截图" class="headerlink" title="下图为连接正常的截图"></a>下图为连接正常的截图</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc6e831.png" alt="05.png"></p><h2 id="连接数据库成功后即可在右侧红框所示窗口内查看当前连接数据库的数据表，左侧红框为选中表的数据，如下图所示："><a href="#连接数据库成功后即可在右侧红框所示窗口内查看当前连接数据库的数据表，左侧红框为选中表的数据，如下图所示：" class="headerlink" title="连接数据库成功后即可在右侧红框所示窗口内查看当前连接数据库的数据表，左侧红框为选中表的数据，如下图所示："></a>连接数据库成功后即可在右侧红框所示窗口内查看当前连接数据库的数据表，左侧红框为选中表的数据，如下图所示：</h2><p><img src="https://i.loli.net/2019/02/20/5c6cbfcc7dcd5.png" alt="06.png"></p><p><em>(via  <a href="https://www.cnblogs.com/jeffen/p/6027970.html" target="_blank" rel="noopener">https://www.cnblogs.com/jeffen/p/6027970.html</a>)</em></p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="testconntction按钮是灰色，无法点击"><a href="#testconntction按钮是灰色，无法点击" class="headerlink" title="testconntction按钮是灰色，无法点击"></a>testconntction按钮是灰色，无法点击</h2><p><strong> 解决方法，点击左下方的download按钮下载所需要的jdbc包<br>   之后点击连接测试会显示successful </strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JSP 连接数据库</title>
      <link href="/2019/02/19/JSP-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/02/19/JSP-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP连接数据库"><a href="#JSP连接数据库" class="headerlink" title="JSP连接数据库"></a>JSP连接数据库</h1><p>本教程假定您已经了解了 JDBC 应用程序的工作方式。在您开始学习 JSP 数据库访问之前，请访问 Java MySQL 连接 来设置相关驱动及配置。</p><p> <strong> 注意 jar包：mysql-connector-java-5.1.39-bin.jar </strong><br> <strong> 下载后把 mysql-connector-java-5.1.39-bin.jar 拷贝到 tomcat 下 lib 目录。 </strong></p><p>从基本概念下手，让我们来创建一个简单的表，并在表中创建几条记录。</p><h2 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h2><p>接下来我们在 MySQL 中创建 RUNOOB 数据库，并创建 websites 数据表，表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`websites`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'站点名称'</span>,</span><br><span class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`alexa`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'Alexa 排名'</span>,</span><br><span class="line">  <span class="string">`country`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'国家'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">10</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>插入一些数据：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">INSERT</span> <span class="selector-tag">INTO</span> `<span class="selector-tag">websites</span>` <span class="selector-tag">VALUES</span> (<span class="string">'1'</span>, <span class="string">'Google'</span>, <span class="string">'https://www.google.cm/'</span>, <span class="string">'1'</span>, <span class="string">'USA'</span>), (<span class="string">'2'</span>, <span class="string">'淘宝'</span>, <span class="string">'https://www.taobao.com/'</span>, <span class="string">'13'</span>, <span class="string">'CN'</span>), (<span class="string">'3'</span>, <span class="string">'菜鸟教程'</span>, <span class="string">'http://www.runoob.com'</span>, <span class="string">'5892'</span>, <span class="string">''</span>), (<span class="string">'4'</span>, <span class="string">'微博'</span>, <span class="string">'http://weibo.com/'</span>, <span class="string">'20'</span>, <span class="string">'CN'</span>), (<span class="string">'5'</span>, <span class="string">'Facebook'</span>, <span class="string">'https://www.facebook.com/'</span>, <span class="string">'3'</span>, <span class="string">'USA'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="SELECT操作"><a href="#SELECT操作" class="headerlink" title="SELECT操作"></a>SELECT操作</h2><p>接下来的这个例子告诉我们如何使用JSTL SQL标签来运行SQL SELECT语句：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.io.*,java.util.*,java.sql.*"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"javax.servlet.http.*,javax.servlet.*"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> <span class="attr">prefix</span>=<span class="string">"sql"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SELECT 操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">JDBC 驱动名及数据库 URL </span></span><br><span class="line"><span class="xml">数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line"><span class="xml">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:setDataSource</span> <span class="attr">var</span>=<span class="string">"snapshot"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span></span><br><span class="line"><span class="xml">     url="jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8"</span></span><br><span class="line"><span class="xml">     user="root"  password="123456"/&gt;</span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:query</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"result"</span>&gt;</span></span></span><br><span class="line"><span class="xml">SELECT * from websites;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:query</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSP 数据库实例 - 菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"row"</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;result.rows&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="INSERT操作"><a href="#INSERT操作" class="headerlink" title="INSERT操作"></a>INSERT操作</h2><p>这个例子告诉我们如何使用JSTL SQL标签来运行SQL INSERT语句：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.io.*,java.util.*,java.sql.*"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"javax.servlet.http.*,javax.servlet.*"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> <span class="attr">prefix</span>=<span class="string">"sql"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SELECT 操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">JDBC 驱动名及数据库 URL </span></span><br><span class="line"><span class="xml">数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line"><span class="xml">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:setDataSource</span> <span class="attr">var</span>=<span class="string">"snapshot"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span></span><br><span class="line"><span class="xml">     url="jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8"</span></span><br><span class="line"><span class="xml">     user="root"  password="123456"/&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">插入数据</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:update</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"result"</span>&gt;</span></span></span><br><span class="line"><span class="xml">INSERT INTO websites (name,url,alexa,country) VALUES ('菜鸟教程移动站', 'http://m.runoob.com', 5093, 'CN');</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:update</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:query</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"result"</span>&gt;</span></span></span><br><span class="line"><span class="xml">SELECT * from websites;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:query</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSP 数据库实例 - 菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"row"</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;result.rows&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="DELETE操作"><a href="#DELETE操作" class="headerlink" title="DELETE操作"></a>DELETE操作</h2><p>这个例子告诉我们如何使用JSTL SQL标签来运行SQL DELETE语句：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.io.*,java.util.*,java.sql.*"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"javax.servlet.http.*,javax.servlet.*"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> <span class="attr">prefix</span>=<span class="string">"sql"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SELECT 操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">JDBC 驱动名及数据库 URL </span></span><br><span class="line"><span class="xml">数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line"><span class="xml">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:setDataSource</span> <span class="attr">var</span>=<span class="string">"snapshot"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span></span><br><span class="line"><span class="xml">     url="jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8"</span></span><br><span class="line"><span class="xml">     user="root"  password="123456"/&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">删除 ID 为 11 的数据</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:update</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"count"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  DELETE FROM websites WHERE Id = ?</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">sql:param</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;11&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:update</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:query</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"result"</span>&gt;</span></span></span><br><span class="line"><span class="xml">SELECT * from websites;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:query</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSP 数据库实例 - 菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"row"</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;result.rows&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="UPDATE操作"><a href="#UPDATE操作" class="headerlink" title="UPDATE操作"></a>UPDATE操作</h2><p>这个例子告诉我们如何使用JSTL SQL标签来运行SQL UPDATE语句：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.io.*,java.util.*,java.sql.*"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"javax.servlet.http.*,javax.servlet.*"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> <span class="attr">prefix</span>=<span class="string">"sql"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SELECT 操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">JDBC 驱动名及数据库 URL </span></span><br><span class="line"><span class="xml">数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line"><span class="xml">useUnicode=true&amp;characterEncoding=utf-8 防止中文乱码</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:setDataSource</span> <span class="attr">var</span>=<span class="string">"snapshot"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span></span><br><span class="line"><span class="xml">     url="jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8"</span></span><br><span class="line"><span class="xml">     user="root"  password="123456"/&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">修改 ID 为 3 的名字：菜鸟教程改为 RUNOOB</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"SiteId"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:update</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"count"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  UPDATE websites SET name = 'RUNOOB' WHERE Id = ?</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">sql:param</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;SiteId&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:update</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql:query</span> <span class="attr">dataSource</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;snapshot&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"result"</span>&gt;</span></span></span><br><span class="line"><span class="xml">SELECT * from websites;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql:query</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JSP 数据库实例 - 菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">th</span>&gt;</span>站点地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"row"</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;result.rows&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;row.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信开发--网页授权access_token与全局access_token获取用户信息的接口</title>
      <link href="/2019/02/19/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83access-token%E4%B8%8E%E5%85%A8%E5%B1%80access-token%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/02/19/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83access-token%E4%B8%8E%E5%85%A8%E5%B1%80access-token%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="微信开发——网页授权access-token与全局access-token获取用户信息的接口"><a href="#微信开发——网页授权access-token与全局access-token获取用户信息的接口" class="headerlink" title="微信开发——网页授权access_token与全局access_token获取用户信息的接口"></a>微信开发——网页授权access_token与全局access_token获取用户信息的接口</h1><h2 id="网页授权access-token"><a href="#网页授权access-token" class="headerlink" title="网页授权access_token"></a>网页授权access_token</h2><p>微信网页授权是通过OAuth2.0机制实现的。在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证——网页授权access_token。通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息。网页授权access_token是通过code换取的凭证，用于获取用户的基本信息，次数不限，时间最长5分钟。</p><p>获取网页授权access_token接口地址为：<br><a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a></p><p>获取code接口地址为:<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></p><p>获取用户信息接口:<br><a href="https://api.weixin.qq.com/sns/userinfo?access_token={0}&amp;openid={1}&amp;lang=zh_CN" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/userinfo?access_token={0}&amp;openid={1}&amp;lang=zh_CN</a></p><h2 id="全局access-token"><a href="#全局access-token" class="headerlink" title="全局access_token"></a>全局access_token</h2><p>其他微信接口需要通过基础支持中的“获取access_token”接口来获取到的全局access_token调用。全局access_token是HTML5网页调用基础接口的全局唯一凭证，有效时间为2小时，每天最多调用2000次。</p><p>获取全局access_token接口地址为：<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</a></p><p>获取用户OpenID接口地址：<br><a href="https://api.weixin.qq.com/cgi-bin/user/info/batchget?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/user/info/batchget?access_token=ACCESS_TOKEN</a></p><p>如果想用这个全局access_token获取用户信息，那么要求用户已经关注了你的公众号。此时才能根据用户的OpenID来获取用户的基本信息。</p>]]></content>
      
      
      <categories>
          
          <category> java-access_token </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2019/02/19/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/02/19/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>相比WYSIWYG编辑器<br>优点：<br>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可<br>缺点：<br>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。<br>还好，简书是支持Markdown编辑模式的。<br>开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器</p><p>一、标题<br>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。<br>示例：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><p>二、字体</p><p>加粗</p><p>要加粗的文字左右分别用两个*号包起来</p><p>斜体</p><p>要倾斜的文字左右分别用一个*号包起来</p><p>斜体加粗</p><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><p>删除线</p><p>要加删除线的文字左右分别用两个<del>号包起来<br>示例：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br>~~这是加删除线的文字</del></p><p>三、引用<br>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用<br>示例：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>四、分割线<br>三个或者三个以上的 - 或者 * 都可以。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><hr><hr><hr><p>五、图片<br>语法：<br><img src="图片地址" alt="图片alt" title="&#39;图片title&#39;"></p><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p><p>示例：<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><p>blockchain</p><p>上传本地图片直接点击导航栏的图片标志，选择图片即可<br>六、超链接<br>语法：<br><a href="超链接地址" title="超链接title">超链接名</a><br>title可加可不加</p><p>示例：<br><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p>效果如下：<br>简书<br>百度<br>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。<br><a href="超链接地址" target="_blank">超链接名</a></p><p>示例<br><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><p>七、列表</p><p>无序列表</p><p>语法：<br>无序列表用 - + * 任何一种都可以</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>注意：- + * 跟内容之间都要有一个空格</p><p>语法：<br>数字加点<br>1.列表内容<br>2.列表内容<br>3.列表内容</p><p>注意：序号跟内容之间要有空格</p><p>列表嵌套</p><p>上一级和下一级之间敲三个空格即可</p><p>八、表格<br>语法：<br>表头|表头|表头<br>—|:–:|—:<br>内容|内容|内容<br>内容|内容|内容</p><p>第二行分割表头和内容。</p><ul><li>有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来。此处省略</li></ul><p>示例：<br>姓名|技能|排行<br>–|:–:|–:<br>刘备|哭|大哥<br>关羽|打|二哥<br>张飞|骂|三弟</p><p>九、代码<br>语法：<br>单行代码：代码之间分别用一个反引号包起来<br>    <code>代码内容</code></p><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行<br>(<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">单行代码</span><br><span class="line">`create database hero;`</span><br><span class="line"></span><br><span class="line">代码块</span><br><span class="line">(```)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br><span class="line"></span><br><span class="line">十、流程图</span><br><span class="line">```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>access_token</title>
      <link href="/2019/02/19/access-token/"/>
      <url>/2019/02/19/access-token/</url>
      
        <content type="html"><![CDATA[<p><em>微信公众号之access_token获取与管理</em></p><p>转自：<a href="https://www.cnblogs.com/fengzheng/p/5027630.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengzheng/p/5027630.html</a></p><p>在将access_token之前，还有两个重要参数需要知晓，这两个参数分别是appID和appsecret，这是在申请公众号的时候自动分配给公众号的，相当于公众号的身份标示，在很多接口中需要这两个参数，接下来在请求access_token的时候就需要这两个参数。</p><p>公众号接入成功之后，接下来就要实现相应的逻辑了。在使用微信公众号接口中，发现有许多请求都需要access_token。access_token是公众号的全局唯一凭证，公众号调用各接口时都需使用access_token。开发者需要进行妥善保存。access_token的存储至少要保留512个字符空间。access_token的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的access_token失效。并且每天调用获取access_token接口的上限是2000次。</p><p>总结以上说明，access_token需要做到以下两点：</p><p>1.因为access_token有2个小时的时效性，要有一个机制保证最长2个小时重新获取一次；</p><p>2.因为接口调用上限每天2000次，所以不能调用太频繁；</p><p>就此，这里采用的方案是这样的，定义一个默认启动的servlet，在init方法中启动一个Thread,这个进程中定义一个无限循环的方法，用来获取access_token，当获取成功后，此进程休眠7000秒，否则休眠3秒钟继续获取。流程图如下：</p><p>下面正式开始在工程中实现以上思路，因为返回的数据都是json格式，这里会用到阿里的fastjson库，为构造请求和处理请求后的数据序列化和反序列化提供支持。后续的其它接口也会用到。</p><p>1.定义一个AccessToken实体</p><p>public class AccessToken {<br>    public String getAccessToken() {<br>        return accessToken;<br>    }</p><pre><code>public void setAccessToken(String accessToken) {    this.accessToken = accessToken;}public int getExpiresin() {    return expiresin;}public void setExpiresin(int expiresin) {    this.expiresin = expiresin;}private String accessToken;private int expiresin;</code></pre><p>}<br>2.定义一个默认启动的servlet，在init方法中启动一个Thread，并在web.xml中将这个servlet设置为默认自启动的。</p><p>import javax.servlet.ServletException;<br>import javax.servlet.annotation.WebServlet;<br>import javax.servlet.http.HttpServlet;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import java.io.IOException;</p><p>/**</p><ul><li>Created by huzhicheng on 2015/12/8.<br>*/<br>@WebServlet(name = “AccessTokenServlet”)<br>public class AccessTokenServlet extends HttpServlet {<br> public void init() throws ServletException {<pre><code>TokenThread.appId = getInitParameter(&quot;appid&quot;);  //获取servlet初始参数appid和appsecretTokenThread.appSecret = getInitParameter(&quot;appsecret&quot;);System.out.println(&quot;appid:&quot;+TokenThread.appId);System.out.println(&quot;appSecret:&quot;+TokenThread.appSecret);new Thread(new TokenThread()).start(); //启动进程</code></pre> }<br> protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<br> }<br> protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<br> }<br>}<br>在web.xml中设置servlet自启动，并设置初始化参数appid和appsecret</li></ul><p><servlet><br>        <servlet-name>initAccessTokenServlet</servlet-name><br>        <servlet-class><br>            org.fengzheng.wechat.accesstoken.AccessTokenServlet<br>        </servlet-class><br>        <init-param><br>            <param-name>appid</param-name><br>            <param-value>your appid</param-value><br>        </init-param><br>        <init-param><br>            <param-name>appsecret</param-name><br>            <param-value>your appsecret</param-value><br>        </init-param><br>        <load-on-startup>0</load-on-startup><br> </servlet><br>3.定义Thread类，在此类中调用access_token获取接口，并将得到的数据抽象到静态实体，以便在其它地方使用。接口地址为<a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET，其中grant_type固定写为client_credential即可。此请求为https的get请求，返回的数据格式为{&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200}。" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET，其中grant_type固定写为client_credential即可。此请求为https的get请求，返回的数据格式为{&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200}。</a></p><p>进程类实现如下：</p><p>import com.alibaba.fastjson.JSON;<br>import com.alibaba.fastjson.JSONObject;<br>import org.fengzheng.wechat.common.NetWorkHelper;</p><p>/**</p><ul><li><p>Created by huzhicheng on 2015/11/5.<br>*/<br>public class TokenThread implements Runnable {<br> public static String appId = “”;</p><p> public static String appSecret= “”;<br><br>　　//注意是静态的<br> public static AccessToken accessToken = null;</p><p> public void run(){</p><pre><code>while (true){    try{        accessToken = this.getAccessToken();        if(null!=accessToken){            System.out.println(accessToken.getAccessToken());            Thread.sleep(7000 * 1000); //获取到access_token 休眠7000秒        }else{            Thread.sleep(1000*3); //获取的access_token为空 休眠3秒        }    }catch(Exception e){        System.out.println(&quot;发生异常：&quot;+e.getMessage());        e.printStackTrace();        try{            Thread.sleep(1000*10); //发生异常休眠1秒        }catch (Exception e1){        }    }}</code></pre><p> }</p></li></ul><pre><code>/** * 获取access_token * @return */private AccessToken getAccessToken(){    NetWorkHelper netHelper = new NetWorkHelper();    String Url = String.format(&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=%s&amp;secret=%s&quot;,this.appId,this.appSecret);    String result = netHelper.getHttpsResponse(Url,&quot;&quot;);    System.out.println(result);    //response.getWriter().println(result);    JSONObject json = JSON.parseObject(result);    AccessToken token = new AccessToken();    token.setAccessToken(json.getString(&quot;access_token&quot;));    token.setExpiresin(json.getInteger(&quot;expires_in&quot;));    return token;}</code></pre><p>}<br>其中NetWorkHelper中getHttpsResponse方法是请求一个https地址，参数requestMethod为字符串“GET”或者“POST”，传null或者“”默认为get方式。</p><p>实现如下：</p><p>public String getHttpsResponse(String hsUrl,String requestMethod) {<br>        URL url;<br>        InputStream is = null;<br>        String resultData = “”;<br>        try {<br>            url = new URL(hsUrl);<br>            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();<br>            TrustManager[] tm = {xtm};</p><pre><code>        SSLContext ctx = SSLContext.getInstance(&quot;TLS&quot;);        ctx.init(null, tm, null);        con.setSSLSocketFactory(ctx.getSocketFactory());        con.setHostnameVerifier(new HostnameVerifier() {            @Override            public boolean verify(String arg0, SSLSession arg1) {                return true;            }        });        con.setDoInput(true); //允许输入流，即允许下载        //在android中必须将此项设置为false        con.setDoOutput(false); //允许输出流，即允许上传        con.setUseCaches(false); //不使用缓冲        if(null!=requestMethod &amp;&amp; !requestMethod.equals(&quot;&quot;)) {            con.setRequestMethod(requestMethod); //使用指定的方式        }        else{            con.setRequestMethod(&quot;GET&quot;); //使用get请求        }        is = con.getInputStream();   //获取输入流，此时才真正建立链接        InputStreamReader isr = new InputStreamReader(is);        BufferedReader bufferReader = new BufferedReader(isr);        String inputLine = &quot;&quot;;        while ((inputLine = bufferReader.readLine()) != null) {            resultData += inputLine + &quot;\n&quot;;        }        System.out.println(resultData);        Certificate[] certs = con.getServerCertificates();        int certNum = 1;        for (Certificate cert : certs) {            X509Certificate xcert = (X509Certificate) cert;        }    } catch (Exception e) {        e.printStackTrace();    }    return resultData;}</code></pre><p>X509TrustManager xtm = new X509TrustManager() {<br>        @Override<br>        public X509Certificate[] getAcceptedIssuers() {<br>            // TODO Auto-generated method stub<br>            return null;<br>        }</p><pre><code>    @Override    public void checkServerTrusted(X509Certificate[] arg0, String arg1)            throws CertificateException {        // TODO Auto-generated method stub    }    @Override    public void checkClientTrusted(X509Certificate[] arg0, String arg1)            throws CertificateException {        // TODO Auto-generated method stub    }};</code></pre><p>至此代码实现完毕，将项目部署，看到控制台输出如下：</p><p>　　</p><p>为方面看效果，可以把休眠时间设置短一点，比如30秒获取一次，然后将access_token输出。下面做一个测试jsp页面，并把休眠时间设置为30秒，这样过30秒刷新页面，就可以看到变化，顺便演示一下在其它地方如何拿到access_token</p><p>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;<br>&lt;%@ page import=”org.fengzheng.wechat.accesstoken.TokenThread” %&gt;</p><html><br>  <head><meta name="generator" content="Hexo 3.8.0"><br>    <title></title><br>  </head><br>  <body><br>  access_token为：&lt;%=TokenThread.accessToken.getAccessToken()%&gt;<br>  </body><br></html>]]></content>
      
      
      <categories>
          
          <category> java-access_token </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrpy使用方法</title>
      <link href="/2019/02/01/scrapy%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/01/scrapy%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapy教程center-gt"><a href="#Scrapy教程center-gt" class="headerlink" title="Scrapy教程center&gt;"></a><center>Scrapy教程</center>center&gt;</h1><h2 id="将要抓取-quotes-toscrape-com网站。"><a href="#将要抓取-quotes-toscrape-com网站。" class="headerlink" title="将要抓取 quotes.toscrape.com网站。"></a>将要抓取 quotes.toscrape.com网站。</h2><p>此教程指导你完成以下任务：</p><p><em>新建Scrapy工程<br>编写一个spider爬网站提取数据<br>用命令行导出爬取的数据<br>改变spider递归爬行链接<br>使用spider参数<br>创建一个项目</em><br>在抓取之前，先要构建Scrapy项目：<br>scrapy startproject tutorial<br>此命令创建以下内容的tutorial目录：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tutorial/</span><br><span class="line">    scrapy.cfg            <span class="comment"># deploy configuration file</span></span><br><span class="line"></span><br><span class="line">    tutorial/             <span class="comment"># project's Python module, you'll import your code from here</span></span><br><span class="line">        __init__.py</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">items</span>.py          <span class="comment"># project items definition file</span></span><br><span class="line">    </span><br><span class="line">        pipelines.py      <span class="comment"># project pipelines file</span></span><br><span class="line">    </span><br><span class="line">        settings.py       <span class="comment"># project settings file</span></span><br><span class="line">    </span><br><span class="line">        spiders/          <span class="comment"># a directory where you'll later put your spiders</span></span><br><span class="line">            __init__.py</span><br></pre></td></tr></table></figure></p><h2 id="第一个爬虫"><a href="#第一个爬虫" class="headerlink" title="第一个爬虫"></a>第一个爬虫</h2><p>Spider是定义为爬取网站信息的类。必须继承自scrapy.Spider，定义初始请求，如何选择页面爬取url，以及如何解析页面内容提取数据。</p><p>这是我们第一个Spider的代码，把它保存在tutorial/spiders目录的 quotes_spider.py 中文件。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span>(<span class="title">scrapy</span>.<span class="title">Spider</span>):</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        urls = [</span><br><span class="line">            <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">            <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> <span class="symbol">urls:</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=<span class="keyword">self</span>.parse)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>, response)</span></span><span class="symbol">:</span></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[-<span class="number">2</span>]</span><br><span class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</span><br><span class="line">        with open(filename, <span class="string">'wb'</span>) as <span class="symbol">f:</span></span><br><span class="line">            f.write(response.body)</span><br><span class="line">        <span class="keyword">self</span>.log(<span class="string">'Saved file %s'</span> % filename)</span><br></pre></td></tr></table></figure></p><p>如上，spider继承自 scrapy.Spider<br>并且定义了一些属性和方法。</p><p>name:标识spider。在项目中必须是唯一的，不能给不同的spider设置相同的名称。<br>start_requests():必须返回一个请求的迭代（可以返回一个请求的列表或者写一个生成器函数），spider从这里开始爬去。子序列请求从这些初始的请求自动生成。<br>parse():在每个请求完成时回掉方法。response参数是TextResponse类的实例，包含页面内容和一些选择器等函数操作。<br>parse()函数通常解析html，把抓到的数据提取为dicts，随后查找新的URLS创建新的请求。</p><p>如何运行我们的蜘蛛<br>在项目的最顶层目录运行：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scrapy crawl quotes</span></span><br></pre></td></tr></table></figure></p><p>这条命令执行我们刚添加的名为quotes的蜘蛛。它发送一些请求到quotes.toscrape.com。你将得到如下输出：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">... (omitted for brevity)</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] INFO: Spider opened</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:6023</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (404) &lt;GET http://quotes.toscrape.com/robots.txt&gt; (referer: None)</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/1/&gt; (referer: None)</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/2/&gt; (referer: None)</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [quotes] DEBUG: Saved file quotes<span class="string">-1</span>.html</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [quotes] DEBUG: Saved file quotes<span class="string">-2</span>.html</span><br><span class="line">2016<span class="string">-12</span><span class="string">-16</span> 21:24:05 [scrapy.core.engine] INFO: Closing spider (finished)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>现在，检查当前目录。你会注意到创建了两个新文件quotes-1.html 和quotes-2.html，里面包含了urls的响应数据。</p><p>内部机制是什么<br>Scrapy调用蜘蛛的start_requests方法，一旦接收到一个响应，立马初始化Response对象然后调用请求的回掉函数（在此例中，时parse()函数）把response对象作为参数。</p><p>start_requests函数简写<br>作为start_requests函数的替代，可以定义start_urls的种子列表。默认的start_requests()函数实现中会使用start_urls创建初始请求。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</span><br><span class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure></p><p>urls的每次请求都会调用parse()。这是因为parse()是Scrapy在没有显式给回掉函数赋值时的默认回掉函数。</p><p>提取数据<br>最好的学习使用Scrapy的选择器的方式是使用Scrapy shell。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy <span class="keyword">shell</span><span class="bash"> <span class="string">'http://quotes.toscrape.com/page/1/'</span></span></span><br></pre></td></tr></table></figure></p><p><strong><em>提示<br>记住使用单引号包裹地址否则包含参数（如&amp;字符）将不会工作</em></strong></p><p>在windows中，使用双引号</p><p>你将看到：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[ ... Scrapy log here ... ]</span><br><span class="line"><span class="number">2016</span>-09-<span class="number">19</span> <span class="number">12</span><span class="symbol">:</span>09<span class="symbol">:</span><span class="number">27</span> [scrapy.core.engine] <span class="symbol">DEBUG:</span> Crawled (<span class="number">200</span>) &lt;GET <span class="symbol">http:</span>/<span class="regexp">/quotes.toscrape.com/page</span><span class="regexp">/1/</span>&gt; (<span class="symbol">referer:</span> None)</span><br><span class="line">[s] Available Scrapy <span class="symbol">objects:</span></span><br><span class="line">[s]   scrapy     scrapy <span class="class"><span class="keyword">module</span> (<span class="title">contains</span> <span class="title">scrapy</span>.<span class="title">Request</span>, <span class="title">scrapy</span>.<span class="title">Selector</span>, <span class="title">etc</span>)</span></span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at <span class="number">0x7fa91d888c90</span>&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET <span class="symbol">http:</span>/<span class="regexp">/quotes.toscrape.com/page</span><span class="regexp">/1/</span>&gt;</span><br><span class="line">[s]   response   &lt;<span class="number">200</span> <span class="symbol">http:</span>/<span class="regexp">/quotes.toscrape.com/page</span><span class="regexp">/1/</span>&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at <span class="number">0x7fa91d888c10</span>&gt;</span><br><span class="line">[s]   spider     &lt;DefaultSpider <span class="string">'default'</span> at <span class="number">0x7fa91c8af990</span>&gt;</span><br><span class="line">[s] Useful <span class="symbol">shortcuts:</span></span><br><span class="line">[s]   shelp()           Shell help (print this help)</span><br><span class="line">[s]   fetch(req_or_url) Fetch request (<span class="keyword">or</span> URL) <span class="keyword">and</span> update local objects</span><br><span class="line">[s]   view(response)    View response <span class="keyword">in</span> a browser</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;在shell中，可以使用response对象的CSS 函数选择元素。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [&lt;Selector xpath=<span class="string">'descendant-or-self::title'</span> data=<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title'</span>)的运行结果是一个名为SelectorList的list-like对象，它是包含XML/HTML元素的 Selector</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 对象列表允许你进一步查询选择和提取数据。</span><br><span class="line"></span><br><span class="line">为了导出title的文本，你可以：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).extract()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'Quotes to Scrape'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 此处有两点要注意：一、我们添加了<span class="symbol">:</span><span class="symbol">:text</span>到CSS查询中，意味着只选择了&lt;title&gt;元素的text属性。如果不指定<span class="symbol">:</span><span class="symbol">:text</span>，我们会得到的是整个title元素。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title'</span>).extract()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 二、.extract()返回SelectorList的文本列表。只取第一个元素的文本：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Quotes to Scrape'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 也可以使用python的列表写法：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>)[<span class="number">0</span>].extract()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Quotes to Scrape'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 但是，使用extract()和extract_first()方法可以在没有找到任何匹配元素时返回None，避免IndexError。</span><br><span class="line"></span><br><span class="line">除了extract()和extract_first()方法，你还可以使用re()的正则表达式方法。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).re(r<span class="string">'Quotes.*'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'Quotes to Scrape'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).re(r<span class="string">'Q\w+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'Quotes'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'title::text'</span>).re(r<span class="string">'(\w+) to (\w+)'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'Quotes'</span>, <span class="string">'Scrape'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 为了找到适当的CSS选择器，你可从shell中使用view(response)浏览响应界面。你可以使用浏览器开发工具或插件如Firebug（此处请看使用Firebug 抓取和使用FireFox抓取）。</span><br></pre></td></tr></table></figure></p><p>选择器小工具也是一个查找CSS选择器很好的工具，可以可视化的查找元素，可在很多浏览器中工作。</p><p>XPATH:简介<br>除了css，Scrapy选择器也支持XPath表达式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.xpath(<span class="string">'//title'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [&lt;Selector xpath=<span class="string">'//title'</span> data=<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.xpath(<span class="string">'//title/text()'</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Quotes to Scrape'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; XPATH表达式很强大，是Scrapy选择器的基础。事实上，CSS选择器在内部转换为Xpath。你可以在shell查看文本选择器的对象类型。</span><br></pre></td></tr></table></figure></p><p>尽管不如CSS选择器流行，Xpath表达式却更强大。它除了可以导航到结构也可以查找内容。使用xpath，你能这么选择如：选择包含Next Page的文本连接。这使得xpath非常适合抓取，我们鼓励你学习Xpath，即使你已经知道如何构造CSS选择器，它会更简单。</p><p>我们在这不会涉及XPath太多，你可以阅读使用XPath.为了学习Xpath，我们建议通过例子学习XPath教程，和如何使用XPath思考。</p><p>提取quotes和authors<br>现在你知道了一点关于选择和提取的知识了，让我们完善我们的spider，写代码从网站页面提取quotes。</p><p><a href="http://quotes.toscrape.com中的每个quote的HTML形式类似下面：" target="_blank" rel="noopener">http://quotes.toscrape.com中的每个quote的HTML形式类似下面：</a><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> class=<span class="string">"quote"</span>&gt;</span><br><span class="line">    &lt;span class=<span class="string">"text"</span>&gt;“The world <span class="keyword">as</span> we have created <span class="keyword">it</span> is <span class="keyword">a</span> <span class="built_in">process</span> <span class="keyword">of</span> our</span><br><span class="line">    thinking. It cannot be changed <span class="keyword">without</span> changing our thinking.”&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">        <span class="keyword">by</span> &lt;small class=<span class="string">"author"</span>&gt;Albert Einstein&lt;/small&gt;</span><br><span class="line">        &lt;<span class="keyword">a</span> href=<span class="string">"/author/Albert-Einstein"</span>&gt;(about)&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> class=<span class="string">"tags"</span>&gt;</span><br><span class="line">        Tags:</span><br><span class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/change/page/1/"</span>&gt;change&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/deep-thoughts/page/1/"</span>&gt;deep-thoughts&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/thinking/page/1/"</span>&gt;thinking&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">a</span> class=<span class="string">"tag"</span> href=<span class="string">"/tag/world/page/1/"</span>&gt;world&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>打开scrapy shell尝试提取我们想要的数据。</p><p>$ scrapy shell ‘<a href="http://quotes.toscrape.com&#39;" target="_blank" rel="noopener">http://quotes.toscrape.com&#39;</a><br>我们使用下面语法得到一系列的quote元素的选择器：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">"div.quote"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 每个选择器都可以查询它们的子元素。我们把第一个选择器赋值给变量，这样我们可以直接运行指定的quote选择器。</span><br><span class="line"></span><br><span class="line">quote = response.css(<span class="string">"div.quote"</span>)[<span class="number">0</span>]</span><br><span class="line">现在我们从quote导出title,author和tags使用我们刚创建的quote对象。当你知道你只需要第一个结果时，你可以：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; title = quote.css(<span class="string">"span.text::text"</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; title</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; author = quote.css(<span class="string">"small.author::text"</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; author</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Albert Einstein'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 考虑到标签是字符串列表，我们可以使用.extract()方法获取他们。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; tags = quote.css(<span class="string">"div.tags a.tag::text"</span>).extract()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; tags</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="string">'change'</span>, <span class="string">'deep-thoughts'</span>, <span class="string">'thinking'</span>, <span class="string">'world'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 解决了如何导出每个，我们现在可迭代所有quotes元素把他们保存到Python字典中。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; for quote in response.css(<span class="string">"div.quote"</span>)<span class="symbol">:</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ...     text = quote.css(<span class="string">"span.text::text"</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ...     author = quote.css(<span class="string">"small.author::text"</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ...     tags = quote.css(<span class="string">"div.tags a.tag::text"</span>).extract()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ...     print(dict(text=text, author=author, tags=tags))</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; &#123;<span class="string">'tags'</span>: [<span class="string">'change'</span>, <span class="string">'deep-thoughts'</span>, <span class="string">'thinking'</span>, <span class="string">'world'</span>], <span class="string">'author'</span>: <span class="string">'Albert Einstein'</span>, <span class="string">'text'</span>: <span class="string">'“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; &#123;<span class="string">'tags'</span>: [<span class="string">'abilities'</span>, <span class="string">'choices'</span>], <span class="string">'author'</span>: <span class="string">'J.K. Rowling'</span>, <span class="string">'text'</span>: <span class="string">'“It is our choices, Harry, that show what we truly are, far more than our abilities.”'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;     ... a few more of these, omitted for brevity</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 使用spider导出数据</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 让我们回到spider。直到现在，仍然没有导出任何数据，只是把HTML页面保存到本地文件中。我们把导出逻辑集成到spider中。</span><br></pre></td></tr></table></figure></p><p>一个Scrapy蜘蛛通常包含多个页面抓取数据的字典。这样，我们可以使用在回调函数中使用yieldPython关键字，如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'span small::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>如果你运行这个蜘蛛，它把导出数据输出到日志中：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">09</span>-<span class="number">19</span> <span class="number">18</span>:<span class="number">57</span>:<span class="number">19</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.scraper</span>] DEBUG: Scraped from &lt;<span class="number">200</span> http:<span class="comment">//quotes.toscrape.com/page/1/&gt;</span></span><br><span class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'life'</span>, <span class="string">'love'</span>], <span class="string">'author'</span>: <span class="string">'André Gide'</span>, <span class="string">'text'</span>: <span class="string">'“It is better to be hated for what you are than to be loved for what you are not.”'</span>&#125;</span><br><span class="line"><span class="number">2016</span>-<span class="number">09</span>-<span class="number">19</span> <span class="number">18</span>:<span class="number">57</span>:<span class="number">19</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.scraper</span>] DEBUG: Scraped from &lt;<span class="number">200</span> http:<span class="comment">//quotes.toscrape.com/page/1/&gt;</span></span><br><span class="line">&#123;<span class="string">'tags'</span>: [<span class="string">'edison'</span>, <span class="string">'failure'</span>, <span class="string">'inspirational'</span>, <span class="string">'paraphrased'</span>], <span class="string">'author'</span>: <span class="string">'Thomas A. Edison'</span>, <span class="string">'text'</span>: <span class="string">"“I have not failed. I've just found 10,000 ways that won't work.”"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>保存抓取到的数据<br>最简单的保存抓取数据是使用Feed exports, 使用下面的命令行：</p><p>scrapy crawl quotes -o quotes.json<br>这将生成一个quotes.json文件包含所有抓取像序列化为json。</p><p>由于历史原因，Scrapy使用追加而不是覆盖，如果你运行两次此命令而没有在第二次删除之前的文件，你将得到一个损毁的JSON文件。</p><p>你也可以使用其他格式，如Json Lines</p><p>scrapy crawl quotes -o quotes.jl<br>Json Lines格式很有用，因为她是stream-like。你可以往里面轻松的添加新纪录。他没有上面的JSON文件的问题当你运行两次的时候。同时，因为每条记录是一行，你可以处理超大文件而不必担心内存问题，有很多工具如JQ可在命令行处理。</p><p>在小项目里（例如此教程），这样就够了。然而，如果你想处理更复杂的抓取项，你可以编写[Item 管道]。当创建项目的时候，会在tutorial/pipelines.py构建一个Item 管道文件。这样如果你只是想保存抓取到的项，就不需要实现任何的Item管道。</p><p>下面的连接<br>假如你不仅想抓取 <a href="http://quotes.toscrape.com网站中的两个页面，而是想抓取所有的网站页面。" target="_blank" rel="noopener">http://quotes.toscrape.com网站中的两个页面，而是想抓取所有的网站页面。</a></p><p>现在你知道如何从页面抓取数据，让我们看看下面的连接如何得到。</p><p>首先从页面中提取我们想要的连接。查看我们的页面，我们可以看见页面中的下一页连接如下所示标志：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/2/"</span>&gt;</span>Next <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>→<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>试着在shell中提取它：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'li.next a'</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'&lt;a href="/page/2/"&gt;Next &lt;span aria-hidden="true"&gt;→&lt;/span&gt;&lt;/a&gt;'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 这得到了整个anchor元素，但是我们想要href属性。为了如此，Scrapu提供了CSS的扩展使你可以选择属性内容，如下：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'/page/2/'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; 现在我们的spider被改成了可以跟踪下一页从中导出数据：</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'span small::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            next_page = response.urljoin(next_page)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=self.parse)</span><br></pre></td></tr></table></figure><p>现在，导出数据后，parse()函数查找下一页，使用urljoin构建一个绝对路径URL并生成一个到下一页的新请求，把下一页的请求注册为回调使得蜘蛛可以爬到所有的页面。</p><p>这是Scrapy跟踪页面的机制：当你在回调中生成一个请求对象，Scrapy会安排请求发送并注册回调函数在请求结束时运行。</p><p>使用这些，你可以构建复杂的爬虫系统，链接规则可以自定义，根据访问页面导出各种各样的数据。</p><p>在我们的例子中，它创建了一系列循环跟踪所有的链接到下一页直到找不到任何连接——方便爬取博客，论坛或其他的导航网站。</p><p>更多示例和模式<br>这是另一个蜘蛛用来解释回调和跟踪连接，这次抓取作者信息：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSpider</span>(<span class="title">scrapy</span>.<span class="title">Spider</span>):</span></span><br><span class="line">    name = <span class="string">'author'</span></span><br><span class="line"></span><br><span class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>, response)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># follow links to author pages</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.author+a::attr(href)'</span>).extract()<span class="symbol">:</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(response.urljoin(href),</span><br><span class="line">                                 callback=<span class="keyword">self</span>.parse_author)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># follow pagination links</span></span><br><span class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_page is <span class="keyword">not</span> <span class="symbol">None:</span></span><br><span class="line">            next_page = response.urljoin(next_page)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=<span class="keyword">self</span>.parse)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_author</span><span class="params">(<span class="keyword">self</span>, response)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">extract_with_css</span><span class="params">(query)</span></span><span class="symbol">:</span></span><br><span class="line">            <span class="keyword">return</span> response.css(query).extract_first().strip()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'name'</span>: extract_with_css(<span class="string">'h3.author-title::text'</span>),</span><br><span class="line">            <span class="string">'birthdate'</span>: extract_with_css(<span class="string">'.author-born-date::text'</span>),</span><br><span class="line">            <span class="string">'bio'</span>: extract_with_css(<span class="string">'.author-description::text'</span>),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>蜘蛛从主页面开始，使用parse_author回调函数跟踪所有的作者页面连接，同时用parse回调函数跟踪导航连接如我们之前看到的。</p><p>parse_author回调函数定义了一个帮助方法，从CSS查询提取和清理并使用作者数据生成Python dict。</p><p>另一件关于蜘蛛的有趣的事情是，即使有很多名言出自同一作者，我们也不必担心多次访问相同作者的页面。默认情况下，Scrapy过滤掉重复的已访问的请求地址，避免程序太多次点击服务器的问题。这是用DUPEFILTER_CLASS配置。</p><p>希望你已理解了Scrapy如何跟踪页面和回调的机制。</p><p>这个程序利用跟踪链接机制实现，查看CrawlSpider类,它是一个通用的蜘蛛实现了一个小的规则引擎，你可以在这之上编写自己的爬虫。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/30/hello-world/"/>
      <url>/2019/01/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
